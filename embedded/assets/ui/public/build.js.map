{"version":3,"sources":["app/render.jsx"],"names":[],"mappingsrFA;AAAA","file":"public/build.js","sourcesContent":["\"use strict\";\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/* Digital Rebar: Provision */\n/* Copyright 2016, RackN */\n/* License: Apache v2 */\n/* jshint esversion: 6 */\n\nfunction debounce(func, wait, immediate) {\n  var timeout;\n  return function () {\n    var context = this,\n        args = arguments;\n    var later = function later() {\n      timeout = null;\n      if (!immediate) func.apply(context, args);\n    };\n    var callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n    if (callNow) func.apply(context, args);\n  };\n};\n\nvar Subnet = function (_React$Component) {\n  _inherits(Subnet, _React$Component);\n\n  function Subnet(props) {\n    _classCallCheck(this, Subnet);\n\n    var _this = _possibleConstructorReturn(this, (Subnet.__proto__ || Object.getPrototypeOf(Subnet)).call(this, props));\n\n    _this.toggleExpand = _this.toggleExpand.bind(_this);\n    _this.handleChange = _this.handleChange.bind(_this);\n    _this.handleOptionChange = _this.handleOptionChange.bind(_this);\n    _this.update = _this.update.bind(_this);\n    _this.remove = _this.remove.bind(_this);\n    return _this;\n  }\n\n  // expands this subnet\n\n\n  _createClass(Subnet, [{\n    key: \"toggleExpand\",\n    value: function toggleExpand() {\n      var subnet = this.props.subnet;\n      subnet._expand = !subnet._expand;\n      this.props.change(this.props.index, subnet);\n    }\n\n    // gets the name of an option from its code\n\n  }, {\n    key: \"getCodeName\",\n    value: function getCodeName(code) {\n      var codes = {\n        1: \"Subnet Mask\",\n        3: \"Default Gateway\",\n        6: \"DNS Server\",\n        15: \"Domain Name\",\n        28: \"Broadcast\",\n        42: \"NTP Server\",\n        67: \"Bootfile Name\"\n      };\n      return codes[code] || \"Code \" + code;\n    }\n\n    // called to make the post/put request that updates the subnet\n\n  }, {\n    key: \"update\",\n    value: function update() {\n      this.props.update(this.props.index);\n    }\n\n    // makes the delete request to remove the subnet\n\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      this.props.remove(this.props.index);\n    }\n\n    // called when an input changes\n\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      var val = event.target.value;\n      if (event.target.type === \"number\" && val && typeof val !== 'undefined') val = parseInt(val);\n      if (event.target.type === \"select-one\") {\n        val = val === \"true\";\n      }\n      var subnet = this.props.subnet;\n      subnet[event.target.name] = val;\n      subnet._edited = true;\n\n      this.props.change(this.props.index, subnet);\n    }\n\n    // called when an option input is changed\n\n  }, {\n    key: \"handleOptionChange\",\n    value: function handleOptionChange(event) {\n      var subnet = this.props.subnet;\n      subnet.Options[event.target.name].Value = event.target.value;\n      subnet._edited = true;\n\n      this.props.change(this.props.index, subnet);\n    }\n\n    // renders the element\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var subnet = JSON.parse(JSON.stringify(this.props.subnet));\n      return React.createElement(\n        \"tbody\",\n        {\n          className: (subnet.updating ? 'updating-content' : '') + \" \" + (subnet._expand ? \"expanded\" : \"\"),\n          style: {\n            position: \"relative\",\n            backgroundColor: subnet._error ? '#fdd' : subnet._new ? \"#dfd\" : subnet._edited ? \"#eee\" : \"#fff\",\n            borderBottom: \"thin solid #ddd\"\n          } },\n        React.createElement(\n          \"tr\",\n          null,\n          React.createElement(\n            \"td\",\n            null,\n            subnet._new ? React.createElement(\"input\", {\n              type: \"text\",\n              name: \"Name\",\n              size: \"8\",\n              placeholder: \"eth0\",\n              value: subnet.Name,\n              onChange: this.handleChange }) : subnet.Name\n          ),\n          React.createElement(\n            \"td\",\n            null,\n            React.createElement(\"input\", {\n              type: \"text\",\n              name: \"Subnet\",\n              size: \"15\",\n              placeholder: \"192.168.1.1/24\",\n              value: subnet.Subnet,\n              onChange: this.handleChange })\n          ),\n          React.createElement(\n            \"td\",\n            null,\n            React.createElement(\n              \"select\",\n              {\n                name: \"OnlyReservations\",\n                type: \"bool\",\n                value: subnet.OnlyReservations,\n                onChange: this.handleChange },\n              React.createElement(\n                \"option\",\n                { value: \"true\" },\n                \"Required\"\n              ),\n              React.createElement(\n                \"option\",\n                { value: \"false\" },\n                \"Optional\"\n              )\n            )\n          ),\n          React.createElement(\n            \"td\",\n            null,\n            React.createElement(\"input\", {\n              type: \"number\",\n              name: \"ActiveLeaseTime\",\n              style: { width: \"50px\" },\n              placeholder: \"0\",\n              value: subnet.ActiveLeaseTime,\n              onChange: this.handleChange }),\n            \"\\xA0&\\xA0\",\n            React.createElement(\"input\", {\n              type: \"number\",\n              name: \"ReservedLeaseTime\",\n              style: { width: \"50px\" },\n              placeholder: \"7200\",\n              value: subnet.ReservedLeaseTime,\n              onChange: this.handleChange }),\n            \"\\xA0seconds\"\n          ),\n          React.createElement(\n            \"td\",\n            null,\n            React.createElement(\n              \"div\",\n              null,\n              React.createElement(\"input\", {\n                type: \"text\",\n                name: \"ActiveStart\",\n                size: \"15\",\n                placeholder: \"10.0.0.0\",\n                value: subnet.ActiveStart,\n                onChange: this.handleChange }),\n              \"...\"\n            ),\n            React.createElement(\n              \"div\",\n              null,\n              React.createElement(\"input\", {\n                type: \"text\",\n                name: \"ActiveEnd\",\n                size: \"15\",\n                placeholder: \"10.0.0.255\",\n                value: subnet.ActiveEnd,\n                onChange: this.handleChange })\n            )\n          ),\n          React.createElement(\n            \"td\",\n            { style: { border: 'thin solid black !important' } },\n            subnet._new || subnet._edited ? React.createElement(\n              \"button\",\n              { onClick: this.update, className: \"icon-button\" },\n              \"save\",\n              React.createElement(\n                \"span\",\n                { className: \"tooltip\" },\n                subnet._new ? 'Add' : 'Save'\n              )\n            ) : '',\n            React.createElement(\n              \"button\",\n              { onClick: this.remove, className: \"icon-button\" },\n              \"delete\",\n              React.createElement(\n                \"span\",\n                { className: \"tooltip\" },\n                \"Remove\"\n              )\n            ),\n            React.createElement(\n              \"button\",\n              { onClick: this.props.copy, className: \"icon-button\" },\n              \"content_copy\",\n              React.createElement(\n                \"span\",\n                { className: \"tooltip\" },\n                \"Copy\"\n              )\n            )\n          )\n        ),\n        React.createElement(\n          \"tr\",\n          null,\n          React.createElement(\n            \"td\",\n            { colSpan: \"7\" },\n            subnet._expand ? React.createElement(\n              \"div\",\n              null,\n              React.createElement(\n                \"h2\",\n                null,\n                \"Other Values\"\n              ),\n              React.createElement(\n                \"table\",\n                null,\n                React.createElement(\n                  \"tbody\",\n                  null,\n                  React.createElement(\n                    \"tr\",\n                    null,\n                    React.createElement(\n                      \"td\",\n                      { style: { textAlign: \"right\", fontWeight: \"bold\" } },\n                      \"Next Server\"\n                    ),\n                    React.createElement(\n                      \"td\",\n                      null,\n                      React.createElement(\"input\", {\n                        type: \"text\",\n                        name: \"NextServer\",\n                        size: \"12\",\n                        value: subnet.NextServer,\n                        onChange: this.handleChange })\n                    )\n                  )\n                )\n              ),\n              React.createElement(\n                \"h2\",\n                null,\n                \"Options\"\n              ),\n              React.createElement(\n                \"table\",\n                null,\n                React.createElement(\n                  \"tbody\",\n                  null,\n                  subnet.Options.map(function (val, i) {\n                    return React.createElement(\n                      \"tr\",\n                      { key: i },\n                      React.createElement(\n                        \"td\",\n                        { style: { textAlign: \"right\", fontWeight: \"bold\" } },\n                        _this2.getCodeName(val.Code)\n                      ),\n                      React.createElement(\n                        \"td\",\n                        null,\n                        React.createElement(\"input\", {\n                          type: \"text\",\n                          name: i,\n                          value: val.Value,\n                          onChange: _this2.handleOptionChange })\n                      ),\n                      React.createElement(\n                        \"td\",\n                        null,\n                        \"Option # \",\n                        val.Code\n                      )\n                    );\n                  })\n                )\n              )\n            ) : React.createElement(\"span\", null),\n            subnet._error && React.createElement(\n              \"div\",\n              null,\n              React.createElement(\n                \"h2\",\n                null,\n                React.createElement(\n                  \"span\",\n                  { className: \"material-icons\" },\n                  \"error\"\n                ),\n                subnet._errorMessage\n              )\n            ),\n            React.createElement(\n              \"div\",\n              { className: \"expand\", onClick: this.toggleExpand },\n              subnet._expand ? React.createElement(\n                \"span\",\n                { className: \"material-icons\" },\n                \"expand_less\"\n              ) : React.createElement(\n                \"span\",\n                { className: \"material-icons\" },\n                \"expand_more\"\n              )\n            )\n          )\n        )\n      );\n    }\n  }]);\n\n  return Subnet;\n}(React.Component);\n\nvar Subnets = function (_React$Component2) {\n  _inherits(Subnets, _React$Component2);\n\n  function Subnets(props) {\n    _classCallCheck(this, Subnets);\n\n    var _this3 = _possibleConstructorReturn(this, (Subnets.__proto__ || Object.getPrototypeOf(Subnets)).call(this, props));\n\n    _this3.state = {\n      subnets: [],\n      interfaces: []\n    };\n\n    _this3.componentDidMount = _this3.componentDidMount.bind(_this3);\n    _this3.update = _this3.update.bind(_this3);\n    _this3.addSubnet = _this3.addSubnet.bind(_this3);\n    _this3.updateSubnet = _this3.updateSubnet.bind(_this3);\n    _this3.removeSubnet = _this3.removeSubnet.bind(_this3);\n    _this3.changeSubnet = _this3.changeSubnet.bind(_this3);\n    return _this3;\n  }\n\n  // gets the subnet and interface json from the api\n\n\n  _createClass(Subnets, [{\n    key: \"getSubnets\",\n    value: function getSubnets() {\n      return new Promise(function (resolve, reject) {\n        var subnets = {};\n        var interfaces = {};\n\n        // get the interfaces from the api\n        $.getJSON(\"../api/v3/interfaces\", function (data) {\n          for (var key in data) {\n            var iface = data[key];\n            interfaces[iface.Name] = iface;\n          }\n\n          // add get subnets from the api and update the state\n          $.getJSON(\"../api/v3/subnets\", function (data) {\n            for (var key in data) {\n              var subnet = data[key];\n              subnets[subnet.Name] = subnet;\n              // don't show interfaces if the name matches\n              if (interfaces[subnet.Name] != undefined) delete interfaces[subnet.Name];\n            }\n\n            resolve({\n              interfaces: interfaces,\n              subnets: subnets\n            });\n          }).fail(function () {\n            reject(\"Failed getting subnets\");\n          });\n        }).fail(function () {\n          reject(\"Failed getting interfaces\");\n        });\n      });\n    }\n\n    // get the subnets and interfaces once this component mounts\n\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.update();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var _this4 = this;\n\n      this.getSubnets().then(function (data) {\n        _this4.setState({\n          subnets: Object.keys(data.subnets).map(function (k) {\n            return data.subnets[k];\n          }),\n          interfaces: Object.keys(data.interfaces).map(function (k) {\n            return data.interfaces[k];\n          })\n        });\n      }, function (err) {});\n    }\n\n    // called to create a new subnet\n    // allows some data other than defaults to be passed in\n\n  }, {\n    key: \"addSubnet\",\n    value: function addSubnet(template) {\n\n      function applyCIDR(cidr, ip) {\n        var rangeMin = ip.split('.');\n        var rangeMax = [];\n        for (var i = 0; i < 4; i++) {\n          var n = Math.min(cidr, 8);\n          rangeMin[i] &= 256 - Math.pow(2, 8 - n);\n          rangeMax[i] = rangeMin[i] + Math.pow(2, 8 - n) - 1;\n          cidr -= n;\n        }\n        return [rangeMin.join('.'), rangeMax.join('.')];\n      }\n\n      var ip, range;\n      if (template.IP) {\n        var fq = template.IP.indexOf('/');\n        ip = template.IP.substring(0, fq);\n        var cidr = parseInt(template.IP.split('/')[1]);\n        var range = applyCIDR(cidr, ip);\n      }\n      var subnet = {\n        _new: true,\n        Name: '',\n        ActiveLeaseTime: 60,\n        ReservedLeaseTime: 7200,\n        OnlyReservations: false,\n        ActiveStart: ip ? range[0] : '',\n        Subnet: '',\n        ActiveEnd: ip ? range[1] : '',\n        Strategy: \"MAC\",\n        NextServer: ip || '',\n        Options: [{ Code: 3, Value: ip || '' }, { Code: 6, Value: ip || '' }, { Code: 15, Value: 'example.com' }, { Code: 67, Value: 'lpxelinux.0' }]\n      };\n\n      // merge the template into our subnet if we have one\n      if (typeof template !== \"undefined\") {\n        for (var key in template) {\n          if (key[0] === \"_\") continue;\n\n          if (key === 'Options') {\n            for (var i = 0; i < template.Options.length; i++) {\n              var index = [3, 6, 15, 67].indexOf(template.Options[i].Code);\n              if (index >= 0) {\n                subnet.Options[index].Value = template.Options[i].Value;\n              } else {\n                subnet.Options.push(template.Options[i]);\n              }\n            }\n          } else subnet[key] = template[key];\n        }\n      }\n\n      // update the state\n      this.setState({\n        subnets: this.state.subnets.concat(subnet)\n      });\n    }\n\n    // makes the post/put request to update the subnet\n    // also updates the interface\n\n  }, {\n    key: \"updateSubnet\",\n    value: function updateSubnet(i) {\n      var _this5 = this;\n\n      var subnet = this.state.subnets[i];\n      subnet.updating = true;\n      this.setState({ subnet: this.state.subnets });\n\n      $.ajax({\n        type: subnet._new ? \"POST\" : \"PUT\",\n        dataType: \"json\",\n        contentType: \"application/json\",\n        url: \"/api/v3/subnets\" + (subnet._new ? \"\" : \"/\" + subnet.Name),\n        data: JSON.stringify(subnet)\n      }).done(function (resp) {\n\n        // update the subnets list with our new interface\n        var subnets = _this5.state.subnets.concat([]);\n\n        resp.updating = false;\n        resp._edited = false;\n        resp._new = false;\n        resp._error = false;\n        resp._errorMessage = '';\n\n        //  update the state\n        subnets[i] = resp;\n\n        // remove matching interfaces\n        var interfaces = _this5.state.interfaces.concat([]);\n        for (var index in interfaces) {\n          if (interfaces[index].Name == resp.Name) interfaces.splice(index);\n        }\n\n        _this5.setState({\n          subnets: subnets,\n          interfaces: interfaces\n        });\n      }).fail(function (err) {\n\n        var subnets = _this5.state.subnets.concat([]);\n        var subnet = subnets[i];\n        subnet.updating = false;\n        subnet._error = true;\n\n        // If our error is from the backend\n        if (err.responseText) {\n          var response = JSON.parse(err.responseText);\n          subnet._errorMessage = \" (\" + err.status + \"): \" + response.Messages.join(\", \");\n        } else {\n          // maybe the backend is down\n          subnet._errorMessage = err.status;\n        }\n\n        _this5.setState({\n          subnets: subnets\n        });\n      });\n    }\n\n    // makes the delete request to remove the subnet or just deletes the new subnet\n\n  }, {\n    key: \"removeSubnet\",\n    value: function removeSubnet(i) {\n      var _this6 = this;\n\n      var subnets = this.state.subnets.concat([]);\n      var subnet = this.state.subnets[i];\n      if (subnet._new) {\n        subnets.splice(i, 1);\n        this.setState({\n          subnets: subnets\n        });\n        return;\n      }\n      subnets[i].updating = true;\n      this.setState({ subnets: subnets });\n\n      $.ajax({\n        type: \"DELETE\",\n        dataType: \"json\",\n        contentType: \"application/json\",\n        url: \"/api/v3/subnets/\" + subnet.Name\n      }).done(function (resp) {\n        // update the subnets list with our new interface\n        var subnets = _this6.state.subnets.concat([]);\n        subnets.splice(i, 1);\n        _this6.setState({\n          subnets: subnets\n        });\n      }).fail(function (err) {\n        subnet.updating = false;\n        subnet._error = true;\n        // If our error is from the backend\n        if (err.responseText) {\n          var response = JSON.parse(err.responseText);\n          subnet._errorMessage = \" (\" + err.status + \"): \" + response.Messages.join(\", \");\n        } else {\n          // maybe the backend is down\n          subnet._errorMessage = err.status;\n        }\n\n        _this6.setState({\n          subnets: subnets\n        });\n      });\n    }\n\n    // updates the state and changes a subnet at a specified index\n\n  }, {\n    key: \"changeSubnet\",\n    value: function changeSubnet(i, subnet) {\n      var subnets = this.state.subnets.concat([]);\n      subnets[i] = subnet;\n      this.setState({\n        subnets: subnets\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this7 = this;\n\n      $('#subnetCount').text(this.state.subnets.length);\n      return React.createElement(\n        \"div\",\n        { id: \"subnets\", style: { paddingTop: '51px' } },\n        React.createElement(\n          \"h2\",\n          { style: { display: 'flex', justifyContent: 'space-between' } },\n          React.createElement(\n            \"span\",\n            { className: \"section-head\" },\n            \"Subnets\"\n          ),\n          React.createElement(\n            \"span\",\n            null,\n            React.createElement(\n              \"a\",\n              { target: \"_blank\", href: \"http://provision.readthedocs.io/en/latest/doc/ui.html#subnets\" },\n              \"UI Help\"\n            ),\n            \" | \",\n            React.createElement(\n              \"a\",\n              { target: \"_blank\", href: \"/swagger-ui/#/subnets\" },\n              \"API Help\"\n            )\n          )\n        ),\n        React.createElement(\n          \"table\",\n          { className: \"fullwidth input-table\" },\n          React.createElement(\n            \"thead\",\n            null,\n            React.createElement(\n              \"tr\",\n              null,\n              React.createElement(\n                \"th\",\n                null,\n                \"Name/NIC\"\n              ),\n              React.createElement(\n                \"th\",\n                null,\n                \"Subnet\"\n              ),\n              React.createElement(\n                \"th\",\n                null,\n                \"Reservations\"\n              ),\n              React.createElement(\n                \"th\",\n                null,\n                \"Active & Reserved Lease\"\n              ),\n              React.createElement(\n                \"th\",\n                null,\n                \"Range\"\n              ),\n              React.createElement(\"th\", null)\n            )\n          ),\n          this.state.subnets.map(function (val, i) {\n            return React.createElement(Subnet, {\n              subnet: val,\n              update: _this7.updateSubnet,\n              change: _this7.changeSubnet,\n              remove: _this7.removeSubnet,\n              copy: function copy() {\n                return _this7.addSubnet(_this7.state.subnets[i]);\n              },\n              key: i,\n              index: i });\n          }),\n          React.createElement(\n            \"tfoot\",\n            null,\n            React.createElement(\n              \"tr\",\n              null,\n              React.createElement(\n                \"td\",\n                { colSpan: \"7\", style: { textAlign: \"center\" } },\n                React.createElement(\n                  \"button\",\n                  { onClick: function onClick() {\n                      return _this7.addSubnet({});\n                    } },\n                  \"New Subnet\"\n                )\n              )\n            )\n          )\n        ),\n        React.createElement(\n          \"h2\",\n          { style: { display: \"flex\", flexDirection: \"row\", alignItems: \"center\" } },\n          React.createElement(\n            \"span\",\n            null,\n            \"Available Interfaces: \"\n          ),\n          React.createElement(\n            \"span\",\n            { className: \"interface-list\" },\n            this.state.interfaces.map(function (val) {\n              return val.Addresses.map(function (subval, i) {\n                return React.createElement(\n                  \"a\",\n                  { key: val.Name + \"-\" + i, className: \"interface-pair\", onClick: function onClick() {\n                      return _this7.addSubnet({ Name: val.Name, Subnet: subval, Interface: val.Name, IP: subval });\n                    } },\n                  React.createElement(\n                    \"header\",\n                    null,\n                    val.Name\n                  ),\n                  React.createElement(\n                    \"subhead\",\n                    null,\n                    subval\n                  )\n                );\n              });\n            })\n          )\n        )\n      );\n    }\n  }]);\n\n  return Subnets;\n}(React.Component);\n\nvar Token = function (_React$Component3) {\n  _inherits(Token, _React$Component3);\n\n  function Token(props) {\n    _classCallCheck(this, Token);\n\n    var _this8 = _possibleConstructorReturn(this, (Token.__proto__ || Object.getPrototypeOf(Token)).call(this, props));\n\n    _this8.xhr = undefined;\n    _this8.STATES = {\n      STANDBY: 0,\n      WAITING: 1,\n      AUTHORIZED: 2,\n      DONE: 3,\n      ERROR: 4\n    };\n\n    _this8.icons = ['mood', 'hourglass_empty', 'security', 'done_all', 'close'];\n\n    _this8.messages = ['', 'Signing In', 'Getting Token', 'Done!', 'Error'];\n\n    _this8.state = {\n      token: '',\n      username: '',\n      password: '',\n      useToken: false,\n      code: 1,\n      requestState: _this8.STATES.STANDBY\n    };\n\n    _this8.handleChange = _this8.handleChange.bind(_this8);\n    _this8.setToken = _this8.setToken.bind(_this8);\n    return _this8;\n  }\n\n  // gets the name of an option from its code\n\n\n  _createClass(Token, [{\n    key: \"getCodeName\",\n    value: function getCodeName() {\n      var codes = {\n        0: \"API Unreachable\",\n        1: \" \",\n        200: \"Granted\",\n        401: \"No Credentials/Token\",\n        403: \"Invalid Credentials/Token\"\n      };\n      return codes[this.state.code] || \"Code \" + this.state.code;\n    }\n\n    // update the token once this component mounts\n\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (location.search.startsWith(\"?token=\")) {\n        var t = location.search.substring(7);\n        this.setState({ token: t, useToken: true });\n        this.setToken(t);\n      } else if (localStorage.DrAuthToken) {\n        this.setState({ useToken: true });\n        this.setToken(localStorage.DrAuthToken);\n      }\n    }\n\n    // tests a token for authenticity\n\n  }, {\n    key: \"setToken\",\n    value: function setToken(token) {\n      var bootenvs = [];\n      var send_token = 'Bearer ' + token;\n      var Token = this;\n\n      if (token.includes(':')) // tokens are in base64 otherwise and will not include colons\n        send_token = 'Basic ' + btoa(token);else localStorage.DrAuthToken = token;\n      console.log(token);\n\n      if (typeof this.xhr !== 'undefined') {\n        this.xhr.abort();\n        this.xhr = undefined;\n      }\n\n      $.ajaxSetup({\n        headers: {\n          Authorization: send_token\n        }\n      });\n\n      this.xhr = $.ajax({\n        url: '../api/v3/bootenvs',\n        type: 'GET',\n        async: true\n      }).then(function (data) {\n        for (var key in data) {\n          if (data[key].Available) bootenvs.push(data[key].Name);\n        }\n\n        if (token.includes(\":\")) {\n          Token.setState({ requestState: Token.STATES.AUTHORIZED });\n\n          var name = token.split(\":\")[0];\n          Token.xhr = $.ajax({\n            url: \"../api/v3/users/\" + name + \"/token?ttl=\" + 8 * 60 * 60, // 8 hours in seconds\n            type: \"GET\",\n            dataType: \"json\",\n            async: true,\n            success: function success(data) {\n\n              localStorage.DrAuthToken = data.Token;\n              $.ajaxSetup({\n                headers: {\n                  Authorization: \"Bearer \" + data.Token\n                }\n              });\n              Token.setState({ code: 200, requestState: Token.STATES.DONE });\n              Token.xhr = undefined;\n              Token.props.onAccessChange(true, bootenvs);\n            },\n            error: function error(xhr, status, _error) {\n              Token.xhr = undefined;\n              Token.setState({ code: xhr.status, requestState: Token.STATES.ERROR });\n              localStorage.DrAuthToken = \"\";\n              Token.props.onAccessChange(false, []);\n            }\n          });\n        } else {\n          Token.xhr = undefined;\n          Token.setState({ code: 200, requestState: Token.STATES.DONE });\n          Token.props.onAccessChange(true, bootenvs);\n        }\n      }, function (xhr, status, error) {\n        localStorage.DrAuthToken = \"\";\n        Token.xhr = undefined;\n        console.log(error);\n        Token.setState({ code: xhr.status, requestState: Token.STATES.ERROR });\n        Token.props.onAccessChange(false, bootenvs);\n      });\n    }\n\n    // called when an input changes\n\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      var state = this.state;\n      state.requestState = this.STATES.WAITING;\n      state[event.target.name] = event.target.value;\n      this.setState(state);\n      var token = this.state.useToken ? this.state.token : this.state.username + ':' + this.state.password;\n      clearTimeout(this.tokenTimeout);\n      var setToken = this.setToken;\n      this.tokenTimeout = setTimeout(function () {\n        setToken(token);\n      }, 500);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this9 = this;\n\n      var Token = this;\n      return React.createElement(\n        \"div\",\n        null,\n        React.createElement(\n          \"div\",\n          { className: \"login-box\" },\n          React.createElement(\n            \"div\",\n            { className: \"login-tabs\" },\n            React.createElement(\n              \"div\",\n              { className: 'tab ' + (this.state.useToken ? '' : 'active'), onClick: function onClick() {\n                  return _this9.setState({ useToken: false });\n                } },\n              React.createElement(\n                \"i\",\n                { className: \"material-icons\" },\n                \"person\"\n              ),\n              \"Login\"\n            ),\n            React.createElement(\n              \"div\",\n              { className: 'tab ' + (this.state.useToken ? 'active' : ''), onClick: function onClick() {\n                  return _this9.setState({ useToken: true });\n                } },\n              React.createElement(\n                \"i\",\n                { className: \"material-icons\" },\n                \"vpn_key\"\n              ),\n              \"Token\"\n            )\n          ),\n          this.state.useToken ? React.createElement(\n            \"div\",\n            { className: \"login-inputs\" },\n            React.createElement(\n              \"div\",\n              { className: \"login-input\" },\n              React.createElement(\"input\", {\n                type: \"text\",\n                name: \"token\",\n                size: \"15\",\n                placeholder: \"Token\",\n                value: this.state.token,\n                onChange: this.handleChange }),\n              React.createElement(\n                \"i\",\n                { className: \"material-icons\" },\n                \"vpn_key\"\n              )\n            ),\n            React.createElement(\n              \"div\",\n              { className: \"login-hint\" },\n              React.createElement(\n                \"span\",\n                null,\n                \"Tokens are generated via the \"\n              ),\n              React.createElement(\n                \"a\",\n                { target: \"_blank\", href: \"http://provision.readthedocs.io/en/stable/doc/cli/drpcli_users_token.html\" },\n                \"drpcli binary\"\n              ),\n              React.createElement(\n                \"span\",\n                null,\n                \" or API\"\n              )\n            )\n          ) : React.createElement(\n            \"div\",\n            { className: \"login-inputs\" },\n            React.createElement(\n              \"div\",\n              { className: \"login-input\" },\n              React.createElement(\"input\", {\n                type: \"text\",\n                name: \"username\",\n                size: \"15\",\n                placeholder: \"Username\",\n                value: this.state.username,\n                onChange: this.handleChange }),\n              React.createElement(\n                \"i\",\n                { className: \"material-icons\" },\n                \"person\"\n              )\n            ),\n            React.createElement(\n              \"div\",\n              { className: \"login-input\" },\n              React.createElement(\"input\", {\n                type: \"password\",\n                name: \"password\",\n                size: \"15\",\n                placeholder: \"Password\",\n                value: this.state.password,\n                onChange: this.handleChange }),\n              React.createElement(\n                \"i\",\n                { className: \"material-icons\" },\n                \"lock\"\n              )\n            ),\n            React.createElement(\n              \"div\",\n              { className: \"login-hint\" },\n              React.createElement(\n                \"span\",\n                null,\n                \"Default credentials are \"\n              ),\n              React.createElement(\n                \"code\",\n                { style: { textDecoration: 'underline', color: '#547f00', cursor: 'pointer' },\n                  onClick: function onClick() {\n                    Token.setState({ username: 'rocketskates', password: 'r0cketsk8ts' });\n                    Token.setToken('rocketskates:r0cketsk8ts');\n                  } },\n                \"rocketskates:r0cketsk8ts\"\n              )\n            )\n          ),\n          React.createElement(\n            \"div\",\n            { style: { padding: '10px', display: 'flex', alignItems: 'center', justifyContent: 'center' } },\n            React.createElement(\n              \"i\",\n              { className: \"material-icons\" },\n              this.icons[this.state.requestState]\n            ),\n            this.state.requestState == this.STATES.ERROR ? React.createElement(\n              \"span\",\n              { style: { color: \"#a00\" } },\n              this.getCodeName()\n            ) : React.createElement(\n              \"span\",\n              null,\n              this.messages[this.state.requestState]\n            )\n          )\n        ),\n        React.createElement(\n          \"div\",\n          { className: \"welcome-box\" },\n          React.createElement(\n            \"h1\",\n            null,\n            \"Welcome to Digital Rebar: Provision\"\n          ),\n          React.createElement(\n            \"p\",\n            { className: \"description\" },\n            React.createElement(\n              \"strong\",\n              null,\n              \"DR Provision \"\n            ),\n            \" is a APLv2 simple Golang executable that provides a simple yet complete API-driven DHCP/PXE/TFTP provisioning system. It is designed to stand alone or operate as part of the \",\n            React.createElement(\n              \"a\",\n              { href: \"http://rebar.digital/\", target: \"_blank\" },\n              \"Digital Rebar\"\n            ),\n            \" management system. Check out some of the links below for more information!\"\n          ),\n          React.createElement(\n            \"div\",\n            { className: \"welcome-menu\" },\n            [{\n              name: 'Resources',\n              links: [{\n                name: 'Introduction',\n                href: '',\n                icon: 'book'\n              }, {\n                name: 'Documentation',\n                href: 'http://provision.readthedocs.io/en/stable/',\n                icon: 'info'\n              }, {\n                name: 'Videos',\n                href: 'https://www.youtube.com/playlist?list=PLXPBeIrpXjfilUi7Qj1Sl0UhjxNRSC7nx',\n                icon: 'video_library'\n              }]\n            }, {\n              name: 'Support',\n              links: [{\n                name: 'Gitter',\n                href: 'https://gitter.im/digitalrebar/core',\n                icon: 'forum'\n              }, {\n                name: 'IRC (Freenode)',\n                href: 'https://webchat.freenode.net/?channels=%23digitalrebar&uio=d4',\n                icon: 'chat'\n              }, {\n                name: 'Mailing List',\n                href: 'https://groups.google.com/forum/#!forum/digitalrebar',\n                icon: 'mail'\n              }]\n            }, {\n              name: 'Project',\n              links: [{\n                name: 'Contribute',\n                href: 'https://github.com/digitalrebar/provision',\n                icon: 'code'\n              }, {\n                name: 'Issues Tracker',\n                href: 'https://github.com/digitalrebar/provision/issues',\n                icon: 'directions'\n              }]\n            }].map(function (section) {\n              return React.createElement(\n                \"section\",\n                null,\n                React.createElement(\n                  \"header\",\n                  null,\n                  section.name\n                ),\n                React.createElement(\n                  \"article\",\n                  null,\n                  section.links.map(function (link) {\n                    return React.createElement(\n                      \"a\",\n                      { href: link.href, target: \"_blank\", \"class\": \"welcome-link\" },\n                      React.createElement(\n                        \"i\",\n                        { className: \"material-icons\" },\n                        link.icon\n                      ),\n                      React.createElement(\n                        \"span\",\n                        null,\n                        link.name\n                      )\n                    );\n                  })\n                )\n              );\n            })\n          )\n        )\n      );\n    }\n  }]);\n\n  return Token;\n}(React.Component);\n\nvar Machine = function (_React$Component4) {\n  _inherits(Machine, _React$Component4);\n\n  function Machine(props) {\n    _classCallCheck(this, Machine);\n\n    var _this10 = _possibleConstructorReturn(this, (Machine.__proto__ || Object.getPrototypeOf(Machine)).call(this, props));\n\n    _this10.toggleExpand = _this10.toggleExpand.bind(_this10);\n    _this10.handleChange = _this10.handleChange.bind(_this10);\n    _this10.update = _this10.update.bind(_this10);\n    _this10.remove = _this10.remove.bind(_this10);\n    return _this10;\n  }\n\n  // expands this subnet\n\n\n  _createClass(Machine, [{\n    key: \"toggleExpand\",\n    value: function toggleExpand() {\n      var machine = this.props.machine;\n      machine._expand = !machine._expand;\n      this.props.change(this.props.index, machine);\n    }\n\n    // called to make the post/put request that updates the subnet\n\n  }, {\n    key: \"update\",\n    value: function update() {\n      this.props.update(this.props.index);\n    }\n\n    // makes the delete request to remove the subnet\n\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      this.props.remove(this.props.index);\n    }\n\n    // called when an input changes\n\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      var val = event.target.value;\n      var machine = this.props.machine;\n      machine[event.target.name] = val;\n      machine._edited = true;\n\n      this.props.change(this.props.index, machine);\n    }\n\n    // renders the element\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var machine = JSON.parse(JSON.stringify(this.props.machine));\n      return React.createElement(\n        \"tbody\",\n        {\n          className: (machine.updating ? 'updating-content' : '') + \" \" + (machine._expand ? 'expanded' : ''),\n          style: {\n            position: \"relative\",\n            backgroundColor: machine._error ? '#fdd' : machine._new ? \"#dfd\" : machine._edited ? \"#eee\" : \"#fff\",\n            borderBottom: \"thin solid #ddd\"\n          } },\n        React.createElement(\n          \"tr\",\n          null,\n          React.createElement(\n            \"td\",\n            null,\n            React.createElement(\"input\", {\n              type: \"text\",\n              name: \"Name\",\n              size: \"15\",\n              placeholder: \"name.example.com\",\n              value: machine.Name,\n              onChange: this.handleChange })\n          ),\n          React.createElement(\n            \"td\",\n            null,\n            React.createElement(\"input\", {\n              type: \"text\",\n              name: \"Address\",\n              size: \"15\",\n              placeholder: \"0.0.0.0\",\n              value: machine.Address,\n              onChange: this.handleChange })\n          ),\n          React.createElement(\n            \"td\",\n            null,\n            React.createElement(\n              \"select\",\n              {\n                name: \"BootEnv\",\n                type: \"bool\",\n                value: machine.BootEnv,\n                onChange: this.handleChange },\n              this.props.bootenvs.map(function (val) {\n                return React.createElement(\n                  \"option\",\n                  { key: val, value: val },\n                  val\n                );\n              })\n            )\n          ),\n          React.createElement(\n            \"td\",\n            null,\n            React.createElement(\"input\", {\n              type: \"text\",\n              name: \"Description\",\n              size: \"15\",\n              placeholder: \"\",\n              value: machine.Description,\n              onChange: this.handleChange })\n          ),\n          React.createElement(\n            \"td\",\n            null,\n            machine.Uuid ? React.createElement(\n              \"div\",\n              { title: machine.Uuid },\n              machine.Uuid.slice(0, 4),\n              \"...\",\n              machine.Uuid.slice(-4)\n            ) : \"not set\"\n          ),\n          React.createElement(\n            \"td\",\n            null,\n            machine._new || machine._edited ? React.createElement(\n              \"button\",\n              { onClick: this.update, className: \"icon-button\" },\n              \"save\",\n              React.createElement(\n                \"span\",\n                { className: \"tooltip\" },\n                machine._new ? 'Add' : 'Save'\n              )\n            ) : '',\n            React.createElement(\n              \"button\",\n              { onClick: this.remove, className: \"icon-button\" },\n              \"delete\",\n              React.createElement(\n                \"span\",\n                { className: \"tooltip\" },\n                \"Remove\"\n              )\n            )\n          )\n        ),\n        React.createElement(\n          \"tr\",\n          null,\n          React.createElement(\n            \"td\",\n            { colSpan: \"6\" },\n            machine._expand ? React.createElement(\n              \"div\",\n              null,\n              machine._error && React.createElement(\n                \"div\",\n                null,\n                React.createElement(\n                  \"h2\",\n                  null,\n                  React.createElement(\n                    \"span\",\n                    { className: \"material-icons\" },\n                    \"error\"\n                  ),\n                  machine._errorMessage\n                )\n              ),\n              React.createElement(\n                \"h2\",\n                null,\n                \"Template Errors\"\n              ),\n              machine.Errors ? machines.Errors : \"none.\",\n              React.createElement(\n                \"h2\",\n                null,\n                \"Template Params\"\n              ),\n              machine.Params ? machines.Params : \"none.\"\n            ) : React.createElement(\"span\", null),\n            React.createElement(\n              \"div\",\n              { className: \"expand\", onClick: this.toggleExpand },\n              machine._expand ? React.createElement(\n                \"span\",\n                { className: \"material-icons\" },\n                \"expand_less\"\n              ) : React.createElement(\n                \"span\",\n                { className: \"material-icons\" },\n                \"expand_more\"\n              )\n            )\n          )\n        )\n      );\n    }\n  }]);\n\n  return Machine;\n}(React.Component);\n\nvar Machines = function (_React$Component5) {\n  _inherits(Machines, _React$Component5);\n\n  function Machines(props) {\n    _classCallCheck(this, Machines);\n\n    var _this11 = _possibleConstructorReturn(this, (Machines.__proto__ || Object.getPrototypeOf(Machines)).call(this, props));\n\n    _this11.state = {\n      machines: []\n    };\n\n    _this11.componentDidMount = _this11.componentDidMount.bind(_this11);\n    _this11.update = _this11.update.bind(_this11);\n    _this11.addMachine = _this11.addMachine.bind(_this11);\n    _this11.changeMachine = _this11.changeMachine.bind(_this11);\n    _this11.removeMachine = _this11.removeMachine.bind(_this11);\n    _this11.updateMachine = _this11.updateMachine.bind(_this11);\n    return _this11;\n  }\n\n  // gets the machine json from the api\n\n\n  _createClass(Machines, [{\n    key: \"getMachines\",\n    value: function getMachines() {\n      return new Promise(function (resolve, reject) {\n        var bootenvs = [];\n\n        // get the interfaces from the api\n        $.getJSON(\"../api/v3/machines\", function (data) {\n\n          resolve({\n            machines: data\n          });\n        }).fail(function () {\n          reject(\"Failed getting Machines\");\n        });\n      });\n    }\n\n    // get the machine once this component mounts\n\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.update();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var _this12 = this;\n\n      this.getMachines().then(function (data) {\n        _this12.setState({\n          machines: data.machines\n        });\n      }, function (err) {});\n    }\n\n    // called to create a new machine\n    // allows some data other than defaults to be passed in\n\n  }, {\n    key: \"addMachine\",\n    value: function addMachine() {\n      var machine = {\n        Name: \"\",\n        Address: \"0.0.0.0\",\n        BootEnv: \"ignore\",\n        Description: \"\",\n        Uuid: null,\n        _new: true\n      };\n      // update the state\n      this.setState({\n        machines: this.state.machines.concat(machine)\n      });\n    }\n\n    // makes the post/put request to update the machine\n\n  }, {\n    key: \"updateMachine\",\n    value: function updateMachine(i) {\n      var _this13 = this;\n\n      var machine = this.state.machines[i];\n      machine.updating = true;\n      this.setState({ machine: this.state.machines });\n\n      $.ajax({\n        type: machine._new ? \"POST\" : \"PUT\",\n        dataType: \"json\",\n        contentType: \"application/json\",\n        url: \"/api/v3/machines\" + (machine._new ? \"\" : \"/\" + machine.Uuid),\n        data: JSON.stringify(machine)\n      }).done(function (resp) {\n\n        // update the machines list with our new machine\n        var machines = _this13.state.machines.concat([]);\n        resp.updating = false;\n        resp._edited = false;\n        resp._new = false;\n        resp._error = false;\n        resp._errorMessage = '';\n\n        //  update the state\n        machines[i] = resp;\n        _this13.setState({\n          machines: machines\n        });\n      }).fail(function (err) {\n\n        var machines = _this13.state.machines.concat([]);\n        var machine = machines[i];\n        machine.updating = false;\n        machine._error = true;\n        machine._expand = true;\n\n        // If our error is from the backend\n        if (err.responseText) {\n          var response = JSON.parse(err.responseText);\n          machine._errorMessage = \" (\" + err.status + \"): \" + response.Messages.join(\", \");\n        } else {\n          // maybe the backend is down\n          machine._errorMessage = err.status;\n        }\n\n        _this13.setState({\n          machines: machines\n        });\n      });\n    }\n  }, {\n    key: \"removeMachine\",\n    value: function removeMachine(i) {\n      var _this14 = this;\n\n      var machines = this.state.machines.concat([]);\n      var machine = this.state.machines[i];\n      if (machine._new) {\n        machines.splice(i, 1);\n        this.setState({ machines: machines });\n        return;\n      }\n      machines[i].updating = true;\n\n      $.ajax({\n        type: \"DELETE\",\n        dataType: \"json\",\n        contentType: \"application/json\",\n        url: \"/api/v3/machines/\" + machine.Uuid\n      }).done(function (resp) {\n        // update the subnets list with our new interface\n        var machines = _this14.state.machines.concat([]);\n        machines.splice(i, 1);\n        _this14.setState({\n          machines: machines\n        });\n      }).fail(function (err) {\n        machine.updating = false;\n        machine._error = true;\n        // If our error is from the backend\n        if (err.responseText) {\n          var response = JSON.parse(err.responseText);\n          machine._errorMessage = \" (\" + err.status + \"): \" + response.Messages.join(\", \");\n        } else {\n          // maybe the backend is down\n          machine._errorMessage = err.status;\n        }\n\n        _this14.setState({\n          machines: machines\n        });\n      });\n    }\n\n    // updates the state and changes a machine at a specified index\n\n  }, {\n    key: \"changeMachine\",\n    value: function changeMachine(i, machine) {\n      var machines = this.state.machines.concat([]);\n      machines[i] = machine;\n      this.setState({\n        machines: machines\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this15 = this;\n\n      $('#machineCount').text(this.state.machines.length);\n      return React.createElement(\n        \"div\",\n        { id: \"machines\", style: { paddingTop: '51px' } },\n        React.createElement(\n          \"h2\",\n          { style: { display: 'flex', justifyContent: 'space-between' } },\n          React.createElement(\n            \"span\",\n            { className: \"section-head\" },\n            \"Machines\"\n          ),\n          React.createElement(\n            \"span\",\n            null,\n            React.createElement(\n              \"a\",\n              { target: \"_blank\", href: \"http://provision.readthedocs.io/en/latest/doc/ui.html#machines\" },\n              \"UI Help\"\n            ),\n            \" | \",\n            React.createElement(\n              \"a\",\n              { target: \"_blank\", href: \"/swagger-ui/#/machines\" },\n              \"API Help\"\n            )\n          )\n        ),\n        React.createElement(\n          \"table\",\n          { className: \"fullwidth input-table\" },\n          React.createElement(\n            \"thead\",\n            null,\n            React.createElement(\n              \"tr\",\n              null,\n              React.createElement(\n                \"th\",\n                null,\n                \"Name\"\n              ),\n              React.createElement(\n                \"th\",\n                null,\n                \"Address\"\n              ),\n              React.createElement(\n                \"th\",\n                null,\n                \"BootEnv\"\n              ),\n              React.createElement(\n                \"th\",\n                null,\n                \"Description\"\n              ),\n              React.createElement(\n                \"th\",\n                null,\n                \"Uuid\"\n              ),\n              React.createElement(\"th\", null)\n            )\n          ),\n          this.state.machines.map(function (val, i) {\n            return React.createElement(Machine, {\n              machine: val,\n              bootenvs: _this15.props.bootenvs,\n              update: _this15.updateMachine,\n              change: _this15.changeMachine,\n              remove: _this15.removeMachine,\n              key: i,\n              index: i\n            });\n          }),\n          React.createElement(\n            \"tfoot\",\n            null,\n            React.createElement(\n              \"tr\",\n              null,\n              React.createElement(\n                \"td\",\n                { colSpan: \"6\", style: { textAlign: \"center\" } },\n                React.createElement(\n                  \"button\",\n                  { onClick: function onClick() {\n                      return _this15.addMachine({});\n                    } },\n                  \"New Machine\"\n                )\n              )\n            )\n          )\n        )\n      );\n    }\n  }]);\n\n  return Machines;\n}(React.Component);\n\nvar Prefs = function (_React$Component6) {\n  _inherits(Prefs, _React$Component6);\n\n  function Prefs(props) {\n    _classCallCheck(this, Prefs);\n\n    var _this16 = _possibleConstructorReturn(this, (Prefs.__proto__ || Object.getPrototypeOf(Prefs)).call(this, props));\n\n    _this16.state = {\n      prefs: {},\n      updated: false\n    };\n\n    _this16.componentDidMount = _this16.componentDidMount.bind(_this16);\n    _this16.update = _this16.update.bind(_this16);\n    _this16.changePrefs = _this16.changePrefs.bind(_this16);\n    _this16.updatePrefs = _this16.updatePrefs.bind(_this16);\n    _this16.handleChange = _this16.handleChange.bind(_this16);\n    return _this16;\n  }\n\n  // gets the machine json from the api\n\n\n  _createClass(Prefs, [{\n    key: \"getPrefs\",\n    value: function getPrefs() {\n      return new Promise(function (resolve, reject) {\n        $.getJSON(\"../api/v3/prefs\", function (data) {\n          resolve({\n            prefs: data\n          });\n        }).fail(function () {\n          reject(\"Failed getting Prefs\");\n        });\n      });\n    }\n\n    // get the machine once this component mounts\n\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.update();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var _this17 = this;\n\n      this.getPrefs().then(function (data) {\n        _this17.setState({\n          prefs: data.prefs\n        });\n      }, function (err) {});\n    }\n\n    // makes the put request to update the param\n\n  }, {\n    key: \"updatePrefs\",\n    value: function updatePrefs() {\n      var _this18 = this;\n\n      var prefs = this.state.prefs;\n\n      $.ajax({\n        type: \"POST\",\n        dataType: \"json\",\n        contentType: \"application/json\",\n        url: \"/api/v3/prefs\",\n        data: JSON.stringify(prefs)\n      }).done(function (resp) {\n        _this18.setState({\n          prefs: prefs,\n          updated: false\n        });\n      }).fail(function (err) {\n        _this18.onAccessChange(false);\n      });\n    }\n\n    // updates the state and changes a param at a specified index\n\n  }, {\n    key: \"changePrefs\",\n    value: function changePrefs(name, value) {\n      var prefs = this.state.prefs;\n      prefs[name] = value;\n      this.setState({\n        prefs: prefs,\n        updated: true\n      });\n    }\n\n    // called when an option input is changed\n\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      var name = event.target.name;\n      var val = event.target.value;\n      this.changePrefs(name, val);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this19 = this;\n\n      return React.createElement(\n        \"div\",\n        null,\n        React.createElement(\n          \"h2\",\n          { style: { display: 'flex', justifyContent: 'space-between' } },\n          React.createElement(\n            \"span\",\n            { className: \"section-head\" },\n            \"Preferences\"\n          ),\n          React.createElement(\n            \"span\",\n            null,\n            React.createElement(\n              \"a\",\n              { target: \"_blank\", href: \"http://provision.readthedocs.io/en/latest/doc/ui.html#prefs\" },\n              \"UI Help\"\n            ),\n            \" | \",\n            React.createElement(\n              \"a\",\n              { target: \"_blank\", href: \"/swagger-ui/#/prefs\" },\n              \"API Help\"\n            )\n          )\n        ),\n        React.createElement(\n          \"table\",\n          { className: \"fullwidth input-table\" },\n          React.createElement(\n            \"thead\",\n            null,\n            React.createElement(\n              \"tr\",\n              null,\n              React.createElement(\n                \"th\",\n                null,\n                \"Name\"\n              ),\n              React.createElement(\n                \"th\",\n                null,\n                \"Value\"\n              ),\n              React.createElement(\"th\", null)\n            )\n          ),\n          React.createElement(\n            \"tbody\",\n            null,\n            Object.keys(this.state.prefs).map(function (val, i) {\n              return React.createElement(\n                \"tr\",\n                { key: i },\n                React.createElement(\n                  \"td\",\n                  null,\n                  val\n                ),\n                React.createElement(\n                  \"td\",\n                  null,\n                  val.indexOf(\"BootEnv\") > 0 && val != \"debugBootEnv\" ? React.createElement(\n                    \"select\",\n                    {\n                      name: val,\n                      type: \"bool\",\n                      value: _this19.state.prefs[val],\n                      onChange: _this19.handleChange },\n                    _this19.props.bootenvs.map(function (v) {\n                      return React.createElement(\n                        \"option\",\n                        { key: v, value: v },\n                        v\n                      );\n                    })\n                  ) : React.createElement(\"input\", {\n                    type: \"text\",\n                    name: val,\n                    size: \"10\",\n                    value: _this19.state.prefs[val],\n                    onChange: _this19.handleChange })\n                ),\n                React.createElement(\n                  \"td\",\n                  null,\n                  _this19.state.updated && Object.keys(_this19.state.prefs).length - 1 == i ? React.createElement(\n                    \"button\",\n                    { onClick: _this19.updatePrefs, className: \"icon-button\" },\n                    \"save\",\n                    React.createElement(\n                      \"span\",\n                      { className: \"tooltip\" },\n                      \"Save\"\n                    )\n                  ) : ''\n                )\n              );\n            })\n          )\n        )\n      );\n    }\n  }]);\n\n  return Prefs;\n}(React.Component);\n\nvar BootEnv = function (_React$Component7) {\n  _inherits(BootEnv, _React$Component7);\n\n  function BootEnv(props) {\n    _classCallCheck(this, BootEnv);\n\n    var _this20 = _possibleConstructorReturn(this, (BootEnv.__proto__ || Object.getPrototypeOf(BootEnv)).call(this, props));\n\n    _this20.toggleExpand = _this20.toggleExpand.bind(_this20);\n    _this20.handleChange = _this20.handleChange.bind(_this20);\n    _this20.update = _this20.update.bind(_this20);\n    _this20.remove = _this20.remove.bind(_this20);\n    _this20.changeTemplate = _this20.changeTemplate.bind(_this20);\n    _this20.addTemplate = _this20.addTemplate.bind(_this20);\n    _this20.removeTemplate = _this20.removeTemplate.bind(_this20);\n    return _this20;\n  }\n\n  // expands this subnet\n\n\n  _createClass(BootEnv, [{\n    key: \"toggleExpand\",\n    value: function toggleExpand() {\n      var bootenv = this.props.bootenv;\n      bootenv._expand = !bootenv._expand;\n      this.props.change(this.props.index, bootenv);\n    }\n\n    // called to make the post/put request that updates the subnet\n\n  }, {\n    key: \"update\",\n    value: function update() {\n      this.props.update(this.props.index);\n    }\n\n    // makes the delete request to remove the subnet\n\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      this.props.remove(this.props.index);\n    }\n\n    // called when an input changes\n\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      var val = event.target.value;\n      if (event.target.type === \"number\" && val && typeof val !== 'undefined') val = parseInt(val);\n      var bootenv = this.props.bootenv;\n      bootenv[event.target.name] = val;\n      bootenv._edited = true;\n\n      this.props.change(this.props.index, bootenv);\n    }\n  }, {\n    key: \"changeTemplate\",\n    value: function changeTemplate(event, i) {\n      this.props.bootenv.Templates[i][event.target.name] = event.target.value;\n      this.props.bootenv._edited = true;\n      this.props.change(this.props.index, this.props.bootenv);\n    }\n  }, {\n    key: \"addTemplate\",\n    value: function addTemplate(event) {\n      this.props.bootenv.Templates.push({\n        Name: \"\",\n        Path: \"\",\n        ID: \"\"\n      });\n      this.props.bootenv._edited = true;\n      this.props.change(this.props.index, this.props.bootenv);\n    }\n  }, {\n    key: \"removeTemplate\",\n    value: function removeTemplate(event, i) {\n      this.props.bootenv.Templates.splice(i, 1);\n      this.props.bootenv._edited = true;\n      this.props.change(this.props.index, this.props.bootenv);\n    }\n\n    // renders the element\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this21 = this;\n\n      var bootenv = JSON.parse(JSON.stringify(this.props.bootenv));\n      return React.createElement(\n        \"tbody\",\n        {\n          className: (bootenv.updating ? 'updating-content' : '') + \" \" + (bootenv._expand ? \"expanded\" : \"\"),\n          style: {\n            position: \"relative\",\n            backgroundColor: bootenv._error ? '#fdd' : bootenv._new ? \"#dfd\" : bootenv._edited ? \"#eee\" : \"#fff\",\n            borderBottom: \"thin solid #ddd\"\n          } },\n        React.createElement(\n          \"tr\",\n          null,\n          React.createElement(\n            \"td\",\n            null,\n            bootenv._new ? React.createElement(\"input\", {\n              type: \"text\",\n              name: \"Name\",\n              size: \"8\",\n              placeholder: \"eth0\",\n              value: bootenv.Name,\n              onChange: this.handleChange }) : bootenv.Name\n          ),\n          React.createElement(\n            \"td\",\n            null,\n            bootenv.Available ? \"Yes\" : \"Error\"\n          ),\n          React.createElement(\n            \"td\",\n            null,\n            React.createElement(\n              \"a\",\n              { href: bootenv.OS.IsoUrl },\n              bootenv.OS.IsoFile\n            )\n          ),\n          React.createElement(\n            \"td\",\n            null,\n            bootenv._new || bootenv._edited ? React.createElement(\n              \"button\",\n              { onClick: this.update, className: \"icon-button\" },\n              \"save\",\n              React.createElement(\n                \"span\",\n                { className: \"tooltip\" },\n                bootenv._new ? 'Add' : 'Save'\n              )\n            ) : '',\n            React.createElement(\n              \"button\",\n              { onClick: this.remove, className: \"icon-button\" },\n              \"delete\",\n              React.createElement(\n                \"span\",\n                { className: \"tooltip\" },\n                \"Remove\"\n              )\n            ),\n            React.createElement(\n              \"button\",\n              { onClick: this.props.copy, className: \"icon-button\" },\n              \"content_copy\",\n              React.createElement(\n                \"span\",\n                { className: \"tooltip\" },\n                \"Copy\"\n              )\n            )\n          )\n        ),\n        React.createElement(\n          \"tr\",\n          null,\n          React.createElement(\n            \"td\",\n            { colSpan: \"7\" },\n            bootenv._expand ? React.createElement(\n              \"div\",\n              null,\n              React.createElement(\n                \"table\",\n                null,\n                React.createElement(\n                  \"tbody\",\n                  null,\n                  React.createElement(\n                    \"tr\",\n                    null,\n                    React.createElement(\n                      \"td\",\n                      { style: { textAlign: \"right\", fontWeight: \"bold\" } },\n                      \"Iso Name\"\n                    ),\n                    React.createElement(\n                      \"td\",\n                      null,\n                      React.createElement(\"input\", {\n                        type: \"text\",\n                        size: \"30\",\n                        value: bootenv.OS.IsoFile,\n                        onChange: function onChange(event) {\n                          bootenv._edited = true;\n                          bootenv.OS.IsoFile = event.target.value;\n                          _this21.props.change(_this21.props.index, bootenv);\n                        } })\n                    )\n                  ),\n                  React.createElement(\n                    \"tr\",\n                    null,\n                    React.createElement(\n                      \"td\",\n                      { style: { textAlign: \"right\", fontWeight: \"bold\" } },\n                      \"Iso URL\"\n                    ),\n                    React.createElement(\n                      \"td\",\n                      null,\n                      React.createElement(\"input\", {\n                        type: \"text\",\n                        size: \"30\",\n                        value: bootenv.OS.IsoUrl,\n                        onChange: function onChange(event) {\n                          bootenv._edited = true;\n                          bootenv.OS.IsoUrl = event.target.value;\n                          _this21.props.change(_this21.props.index, bootenv);\n                        } })\n                    )\n                  )\n                )\n              ),\n              React.createElement(\n                \"h2\",\n                null,\n                \"Templates\"\n              ),\n              React.createElement(\n                \"table\",\n                null,\n                React.createElement(\n                  \"thead\",\n                  null,\n                  React.createElement(\n                    \"tr\",\n                    null,\n                    React.createElement(\n                      \"th\",\n                      null,\n                      \"Name\"\n                    ),\n                    React.createElement(\n                      \"th\",\n                      null,\n                      \"Path\"\n                    ),\n                    React.createElement(\n                      \"th\",\n                      null,\n                      \"ID\"\n                    ),\n                    React.createElement(\"th\", null)\n                  )\n                ),\n                React.createElement(\n                  \"tbody\",\n                  null,\n                  bootenv.Templates.map(function (val, i) {\n                    return React.createElement(\n                      \"tr\",\n                      { key: i },\n                      React.createElement(\n                        \"td\",\n                        null,\n                        React.createElement(\"input\", {\n                          type: \"text\",\n                          size: \"15\",\n                          name: \"Name\",\n                          value: val.Name,\n                          onChange: function onChange(e) {\n                            return _this21.changeTemplate(e, i);\n                          } })\n                      ),\n                      React.createElement(\n                        \"td\",\n                        null,\n                        React.createElement(\"input\", {\n                          type: \"text\",\n                          size: \"30\",\n                          name: \"Path\",\n                          value: val.Path,\n                          onChange: function onChange(e) {\n                            return _this21.changeTemplate(e, i);\n                          } })\n                      ),\n                      React.createElement(\n                        \"td\",\n                        null,\n                        React.createElement(\"input\", {\n                          type: \"text\",\n                          size: \"20\",\n                          name: \"ID\",\n                          value: val.ID,\n                          onChange: function onChange(e) {\n                            return _this21.changeTemplate(e, i);\n                          } })\n                      ),\n                      React.createElement(\n                        \"td\",\n                        null,\n                        React.createElement(\n                          \"button\",\n                          { onClick: function onClick(e) {\n                              return $.getJSON(\"../api/v3/templates/\" + val.ID, function (d) {\n                                return alert(JSON.stringify(d, 0, \"  \"));\n                              });\n                            }, className: \"icon-button\" },\n                          \"open_in_new\",\n                          React.createElement(\n                            \"span\",\n                            { className: \"tooltip\" },\n                            \"Preview\"\n                          )\n                        ),\n                        React.createElement(\n                          \"button\",\n                          { onClick: function onClick(e) {\n                              return _this21.removeTemplate(e, i);\n                            }, className: \"icon-button\" },\n                          \"delete\",\n                          React.createElement(\n                            \"span\",\n                            { className: \"tooltip\" },\n                            \"Remove\"\n                          )\n                        )\n                      )\n                    );\n                  }),\n                  React.createElement(\n                    \"tr\",\n                    null,\n                    React.createElement(\n                      \"td\",\n                      { colSpan: \"4\", style: { textAlign: \"center\" } },\n                      React.createElement(\n                        \"button\",\n                        { onClick: this.addTemplate },\n                        \"Add Template\"\n                      )\n                    )\n                  )\n                )\n              )\n            ) : React.createElement(\"span\", null),\n            bootenv._error && React.createElement(\n              \"div\",\n              null,\n              React.createElement(\n                \"h2\",\n                null,\n                React.createElement(\n                  \"span\",\n                  { className: \"material-icons\" },\n                  \"error\"\n                ),\n                bootenv._errorMessage\n              )\n            ),\n            React.createElement(\n              \"div\",\n              { className: \"expand\", onClick: this.toggleExpand },\n              bootenv._expand ? React.createElement(\n                \"span\",\n                { className: \"material-icons\" },\n                \"expand_less\"\n              ) : React.createElement(\n                \"span\",\n                { className: \"material-icons\" },\n                \"expand_more\"\n              )\n            )\n          )\n        )\n      );\n    }\n  }]);\n\n  return BootEnv;\n}(React.Component);\n\nvar BootEnvs = function (_React$Component8) {\n  _inherits(BootEnvs, _React$Component8);\n\n  function BootEnvs(props) {\n    _classCallCheck(this, BootEnvs);\n\n    var _this22 = _possibleConstructorReturn(this, (BootEnvs.__proto__ || Object.getPrototypeOf(BootEnvs)).call(this, props));\n\n    _this22.state = {\n      bootenvs: []\n    };\n\n    _this22.componentDidMount = _this22.componentDidMount.bind(_this22);\n    _this22.update = _this22.update.bind(_this22);\n    _this22.addBootEnv = _this22.addBootEnv.bind(_this22);\n    _this22.updateBootEnv = _this22.updateBootEnv.bind(_this22);\n    _this22.removeBootEnv = _this22.removeBootEnv.bind(_this22);\n    _this22.changeBootEnv = _this22.changeBootEnv.bind(_this22);\n    return _this22;\n  }\n\n  // gets the bootenv json from the api\n\n\n  _createClass(BootEnvs, [{\n    key: \"getBootEnvs\",\n    value: function getBootEnvs() {\n      return new Promise(function (resolve, reject) {\n\n        // get the interfaces from the api\n        $.getJSON(\"../api/v3/bootenvs\", function (data) {\n          resolve({\n            bootenvs: data\n          });\n        }).fail(function (err) {\n          reject(\"Failed getting BootEnvs\");\n        });\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.update();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var _this23 = this;\n\n      this.getBootEnvs().then(function (data) {\n        _this23.setState({\n          bootenvs: data.bootenvs\n        });\n      }, function (err) {});\n    }\n\n    // called to create a new subnet    \n    // allows some data other than defaults to be passed in   \n\n  }, {\n    key: \"addBootEnv\",\n    value: function addBootEnv(template) {\n      var bootenv = {\n        _new: true,\n        Name: '',\n        Description: '',\n        OS: {\n          Name: '',\n          Family: '',\n          Codename: '',\n          Version: '',\n          IsoFile: '',\n          IsoSha256: '',\n          IsoUrl: ''\n        },\n        Templates: [],\n        Kernel: \"\",\n        Initrds: [],\n        RequiredParams: [],\n        Available: true,\n        Errors: []\n      };\n\n      // merge the template into our bootenv if we have one\n      if (typeof template !== \"undefined\") {\n        for (var key in template) {\n          if (key[0] === \"_\") continue;\n\n          bootenv[key] = template[key];\n        }\n      }\n\n      // update the state\n      this.setState({\n        bootenvs: this.state.bootenvs.concat(bootenv)\n      });\n    }\n\n    // makes the post/put request to update the bootenv\n\n  }, {\n    key: \"updateBootEnv\",\n    value: function updateBootEnv(i) {\n      var _this24 = this;\n\n      var bootenv = this.state.bootenvs[i];\n      bootenv.updating = true;\n      this.setState({ bootenv: this.state.bootenvs });\n\n      $.ajax({\n        type: bootenv._new ? \"POST\" : \"PUT\",\n        dataType: \"json\",\n        contentType: \"application/json\",\n        url: \"/api/v3/bootenvs\" + (bootenv._new ? \"\" : \"/\" + bootenv.Name),\n        data: JSON.stringify(bootenv)\n      }).done(function (resp) {\n\n        // update the bootenvs list with our new interface\n        var bootenvs = _this24.state.bootenvs.concat([]);\n\n        resp.updating = false;\n        resp._edited = false;\n        resp._new = false;\n        resp._error = false;\n        resp._errorMessage = '';\n\n        //  update the state\n        bootenvs[i] = resp;\n        _this24.setState({\n          bootenvs: bootenvs\n        });\n      }).fail(function (err) {\n\n        var bootenvs = _this24.state.bootenvs.concat([]);\n        var bootenv = bootenvs[i];\n        bootenv.updating = false;\n        bootenv._error = true;\n\n        // If our error is from the backend\n        if (err.responseText) {\n          var response = JSON.parse(err.responseText);\n          bootenv._errorMessage = \" (\" + err.status + \"): \" + response.Messages.join(\", \");\n        } else {\n          // maybe the backend is down\n          bootenv._errorMessage = err.status;\n        }\n\n        _this24.setState({\n          bootenvs: bootenvs\n        });\n      });\n    }\n\n    // makes the delete request to remove the subnet or just deletes the new subnet\n\n  }, {\n    key: \"removeBootEnv\",\n    value: function removeBootEnv(i) {\n      var _this25 = this;\n\n      var subnets = this.state.subnets.concat([]);\n      var subnet = this.state.subnets[i];\n      if (subnet._new) {\n        subnets.splice(i, 1);\n        this.setState({\n          subnets: subnets\n        });\n        return;\n      }\n      subnets[i].updating = true;\n      this.setState({ subnets: subnets });\n\n      $.ajax({\n        type: \"DELETE\",\n        dataType: \"json\",\n        contentType: \"application/json\",\n        url: \"/api/v3/subnets/\" + subnet.Name\n      }).done(function (resp) {\n        // update the subnets list with our new interface\n        var subnets = _this25.state.subnets.concat([]);\n        subnets.splice(i, 1);\n        _this25.setState({\n          subnets: subnets\n        });\n      }).fail(function (err) {\n        subnet.updating = false;\n        subnet._error = true;\n        // If our error is from the backend\n        if (err.responseText) {\n          var response = JSON.parse(err.responseText);\n          subnet._errorMessage = \" (\" + err.status + \"): \" + response.Messages.join(\", \");\n        } else {\n          // maybe the backend is down\n          subnet._errorMessage = err.status;\n        }\n\n        _this25.setState({\n          subnets: subnets\n        });\n      });\n    }\n\n    // updates the state and changes a subnet at a specified index\n\n  }, {\n    key: \"changeBootEnv\",\n    value: function changeBootEnv(i, bootenv) {\n      var bootenvs = this.state.bootenvs.concat([]);\n      bootenvs[i] = bootenv;\n      this.setState({\n        bootenvs: bootenvs\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this26 = this;\n\n      $('#bootenvCount').text(this.state.bootenvs.length);\n      return React.createElement(\n        \"div\",\n        { id: \"bootenvs\", style: { paddingTop: '51px' } },\n        React.createElement(\n          \"h2\",\n          { style: { display: 'flex', justifyContent: 'space-between' } },\n          React.createElement(\n            \"span\",\n            { className: \"section-head\" },\n            \"Boot Environments\"\n          ),\n          React.createElement(\n            \"span\",\n            null,\n            React.createElement(\n              \"a\",\n              { target: \"_blank\", href: \"http://provision.readthedocs.io/en/latest/doc/ui.html#bootenvs\" },\n              \"UI Help\"\n            ),\n            \" | \",\n            React.createElement(\n              \"a\",\n              { target: \"_blank\", href: \"/swagger-ui/#/bootenvs\" },\n              \"API Help\"\n            )\n          )\n        ),\n        React.createElement(\n          \"table\",\n          { className: \"fullwidth input-table\" },\n          React.createElement(\n            \"thead\",\n            null,\n            React.createElement(\n              \"tr\",\n              null,\n              React.createElement(\n                \"th\",\n                null,\n                \"Environment\"\n              ),\n              React.createElement(\n                \"th\",\n                null,\n                \"Available\"\n              ),\n              React.createElement(\n                \"th\",\n                null,\n                \"Path\"\n              ),\n              React.createElement(\"th\", null)\n            )\n          ),\n          this.state.bootenvs.map(function (val, i) {\n            return React.createElement(BootEnv, {\n              bootenv: val,\n              update: _this26.updateBootEnv,\n              change: _this26.changeBootEnv,\n              remove: _this26.removeBootEnv,\n              copy: function copy() {\n                return _this26.addBootEnv(_this26.state.bootenvs[i]);\n              },\n              key: i,\n              index: i });\n          }),\n          React.createElement(\n            \"tfoot\",\n            null,\n            React.createElement(\n              \"tr\",\n              null,\n              React.createElement(\n                \"td\",\n                { colSpan: \"4\", style: { textAlign: \"center\" } },\n                React.createElement(\n                  \"button\",\n                  { onClick: function onClick() {\n                      return _this26.addBootEnv({});\n                    } },\n                  \"New BootEnv\"\n                )\n              )\n            )\n          )\n        )\n      );\n    }\n  }]);\n\n  return BootEnvs;\n}(React.Component);\n\nvar Page = function (_React$Component9) {\n  _inherits(Page, _React$Component9);\n\n  function Page(props) {\n    _classCallCheck(this, Page);\n\n    var _this27 = _possibleConstructorReturn(this, (Page.__proto__ || Object.getPrototypeOf(Page)).call(this, props));\n\n    _this27.state = {\n      access: false,\n      bootenvs: []\n    };\n\n    _this27.onAccessChange = _this27.onAccessChange.bind(_this27);\n    _this27.update = _this27.update.bind(_this27);\n    //this.handleChange = this.handleChange.bind(this);\n    return _this27;\n  }\n\n  // get the page and interfaces once this component mounts\n\n\n  _createClass(Page, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"update\",\n    value: function update() {\n      var page = this;\n      console.log(\"Updating\");\n      console.log(this);\n      $.getJSON(\"../api/v3/bootenvs\", function (data) {\n        var bootenvs = [];\n        // filter bootenvs\n        for (var key in data) {\n          if (data[key].Available) bootenvs.push(data[key].Name);\n        }\n\n        // update each ref\n        page.setState({ bootenvs: bootenvs }, function () {\n          return _.each(page.refs, function (ref) {\n            return ref.update();\n          });\n        });\n      }).fail(function () {});\n    }\n\n    // called when an input changes\n\n  }, {\n    key: \"onAccessChange\",\n    value: function onAccessChange(access, bootenvs) {\n      this.setState({ access: access, bootenvs: bootenvs });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var access = this.state.access;\n      var bootenvs = this.state.bootenvs;\n      $('#navcontrols').css(\"display\", access ? \"flex\" : \"none\");\n      if (access) {\n        return React.createElement(\n          \"div\",\n          { id: \"swagger-ui-container\", className: \"swagger-ui-wrap\" },\n          React.createElement(Subnets, {\n            ref: \"subnets\",\n            onAccessChange: this.onAccessChange }),\n          React.createElement(\"hr\", null),\n          React.createElement(BootEnvs, {\n            ref: \"bootenvs\",\n            onAccessChange: this.onAccessChange }),\n          React.createElement(\"hr\", null),\n          React.createElement(Prefs, {\n            ref: \"prefs\",\n            bootenvs: bootenvs,\n            onAccessChange: this.onAccessChange }),\n          React.createElement(\"hr\", null),\n          React.createElement(Machines, {\n            ref: \"machines\",\n            bootenvs: bootenvs,\n            onAccessChange: this.onAccessChange })\n        );\n      }\n      return React.createElement(\n        \"div\",\n        null,\n        React.createElement(\n          \"center\",\n          null,\n          React.createElement(Token, {\n            access: access,\n            onAccessChange: this.onAccessChange })\n        )\n      );\n    }\n  }]);\n\n  return Page;\n}(React.Component);\n\nwindow.Provisioner = ReactDOM.render(React.createElement(Page, null), document.getElementById('page'));\n"]}
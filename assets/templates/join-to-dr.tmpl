{{ if .ParamExists "join_dr" }}
{{ if eq (.Params "join_dr") true }}
#
# This template joins the node to a 
# Digital Rebar instance.  The node has a service
# installed that will contact Digital Rebar to activate
# node role operations when rebooted.
#
# Runs as part of a shell script for kickstart
# The template does is only functional if join_dr is true.
#
# Required Parameters: join_dr, CommandURL, rebar-machine_key
# Optional Parameters: ntp_servers
#
# NOTE: Remember that the rebar user from Digital Rebar MUST
# have password-less root access.  The public key is in the
# rebar-access ROLE and can be found in the "system" deployment.
#
# Assumes that a HOSTNAME is set
#
# Parameter YAML format:
#
# join_dr: true
# CommandURL: https://192.168.124.10
# ntp_servers:
#   - 1.1.1.1
#   - 2.1.1.1
#   - 3.1.1.1
#
# Defaults:
# join_dr - Function is used if and only if join_dr is true
# CommandURL - API Endpoint for Digital Rebar
# rebar-machine_key - User/Password that allows for machine creation/update - format: username:password
# ntp_servers - ignore if unset.  First entry in list is used to update time on reboot
#

(cd /bin; curl -fgl -O "{{.ProvisionerURL}}/files/rebar"; chmod 755 rebar)
export REBAR_ENDPOINT="{{.Param "CommandURL"}}"
export REBAR_KEY="{{.Param "rebar-machine_key"}}"
echo "$REBAR_KEY" >/etc/rebar.install.key

cat > /usr/sbin/rebar_join <<'EOF5432'
#!/bin/bash
# Copyright 2016, RackN
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

### BEGIN INIT INFO
# Provides:               rebar_join.sh
# Required-Start:         sshd
# Required-Stop:
# Default-Start:          2 3 4 5
# Default-Stop:
# Short-Description:      Rebar Join Script
#### END INIT INFO

# Spin while we wait for the interface to come up.
set -x
export PS4='${BASH_SOURCE}@${LINENO}(${FUNCNAME[0]}): '
export PATH="$PATH:/usr/local/bin"

echo "Waiting on our network interface to come up..."
while ! ip addr | grep -v " lo" | grep -q "inet "
do
  sleep 1
done

if [[ ! -f /etc/rebar-uuid ]]; then
    echo "Missing /etc/rebar-uuid!"
    echo "You will need to register this server with Rebar manually,"
    echo "and then add the node UUID to /etc/rebar-uuid"
fi
export REBAR_UUID="$(cat /etc/rebar-uuid)"

if [[ -f /etc/rebar.install.key ]]; then
    export REBAR_KEY="$(cat /etc/rebar.install.key)"
fi

[[ -x /bin/rebar ]] || (
    cd /bin
    curl -fgl -O "{{.ProvisionerURL}}/files/rebar"
    chmod 755 rebar
)
export REBAR_ENDPOINT="{{ .Param "CommandURL" }}"


put_alive() {
    echo "Setting node alive=$1"
    rebar nodes update "$REBAR_UUID" "{\"alive\": $1, \"bootenv\": \"local\"}"
    while [[ $(rebar nodes get "$REBAR_UUID" attrib provisioner-active-bootstate |jq -r '.value') != local ]]; do
        sleep 1
    done
}

# Force time (some OS already have this done)q
{{ if .ParamExists "ntp_servers" }}
ntpdate "{{index (.Param "ntp_servers") 0}}" 2>/dev/null >/dev/null
{{ end }}

case $1 in
    stop) put_alive false;;
    status) echo "OK";;
    start) put_alive false; put_alive true ;;
    *) echo "Unknown action to rebar_join.sh."
        exit 1;;
esac
EOF5432
chmod +x /usr/sbin/rebar_join

if [[ -e /etc/systemd/system ]] ; then
    cat > /etc/systemd/system/rebar.service <<'EOF6543'
[Unit]
Description=Rebar Node Checkin
Documentation=http://github.com/digitalrebar
After=sshd.service

[Service]
Type=oneshot
ExecStart=/usr/sbin/rebar_join start

[Install]
WantedBy=multi-user.target
EOF6543

    systemctl enable rebar

elif [[ -e /etc/init.d ]] ; then
    ln -s /usr/sbin/rebar_join /etc/init.d/rebar_join
    if which update-rc.d ; then
        update-rc.d rebar_join defaults
    else
       ln -s /etc/init.d/rebar_join /etc/rc3.d/S80rebar
       ln -s /etc/init.d/rebar_join /etc/rc5.d/S80rebar
       ln -s /etc/init.d/rebar_join /etc/rc2.d/S80rebar
    fi
fi

# Tell Digital Rebar we are here and set the uuid from DR

# See if we have already been created.
REBAR_UUID="{{.Machine.UUID}}"
echo "${REBAR_UUID}" > /etc/rebar-uuid

if ! rebar nodes exists "${REBAR_UUID}" ; then
    # Create a new node for us,
    # Add the default noderoles we will need, and
    # Let the annealer do its thing.
    rebar nodes create "{\"name\": \"$HOSTNAME\",
\"uuid\": \"$REBAR_UUID\",
\"ip\": \"{{.Machine.Address}}\",
\"variant\": \"metal\",
\"provider\": \"metal\",
\"os_family\": \"linux\",
\"arch\": \"$(uname -m)\"}" || {
        echo "We could not create a node for ourself!"
        exit 1
    }   
fi

# does the rebar-managed-role exist?
if ! grep -q rebar-managed-node < <(rebar nodes roles $REBAR_UUID); then
    rebar nodes bind $REBAR_UUID to rebar-managed-node && \
    rebar nodes commit $REBAR_UUID || {
        echo "We could not commit the node!"
        exit 1
    }   
else
    echo "Node already committed, moving on"
fi  

control_ip="{{.Machine.Address}}"
rebar nodes set $REBAR_UUID attrib node-control-address to "{\"value\": \"${control_ip}\"}"
rebar nodes set $REBAR_UUID attrib node-private-control-address to "{\"value\": \"${control_ip}\"}"

# Always make sure we are marking the node not alive. It will comeback later.
rebar nodes update $REBAR_UUID '{"alive": false, "bootenv": "local"}'

{{ end }}
{{ end }}

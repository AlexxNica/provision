package templates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostTemplateHandlerFunc turns a function with the right signature into a post template handler
type PostTemplateHandlerFunc func(PostTemplateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostTemplateHandlerFunc) Handle(params PostTemplateParams) middleware.Responder {
	return fn(params)
}

// PostTemplateHandler interface for that can handle valid post template params
type PostTemplateHandler interface {
	Handle(PostTemplateParams) middleware.Responder
}

// NewPostTemplate creates a new http.Handler for the post template operation
func NewPostTemplate(ctx *middleware.Context, handler PostTemplateHandler) *PostTemplate {
	return &PostTemplate{Context: ctx, Handler: handler}
}

/*PostTemplate swagger:route POST /templates Templates postTemplate

Create Template

*/
type PostTemplate struct {
	Context *middleware.Context
	Handler PostTemplateHandler
}

func (o *PostTemplate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPostTemplateParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

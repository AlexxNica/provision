package templates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteTemplateHandlerFunc turns a function with the right signature into a delete template handler
type DeleteTemplateHandlerFunc func(DeleteTemplateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteTemplateHandlerFunc) Handle(params DeleteTemplateParams) middleware.Responder {
	return fn(params)
}

// DeleteTemplateHandler interface for that can handle valid delete template params
type DeleteTemplateHandler interface {
	Handle(DeleteTemplateParams) middleware.Responder
}

// NewDeleteTemplate creates a new http.Handler for the delete template operation
func NewDeleteTemplate(ctx *middleware.Context, handler DeleteTemplateHandler) *DeleteTemplate {
	return &DeleteTemplate{Context: ctx, Handler: handler}
}

/*DeleteTemplate swagger:route DELETE /templates/{uuid} Templates deleteTemplate

Delete Template

*/
type DeleteTemplate struct {
	Context *middleware.Context
	Handler DeleteTemplateHandler
}

func (o *DeleteTemplate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewDeleteTemplateParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

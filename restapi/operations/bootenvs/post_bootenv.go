package bootenvs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostBootenvHandlerFunc turns a function with the right signature into a post bootenv handler
type PostBootenvHandlerFunc func(PostBootenvParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostBootenvHandlerFunc) Handle(params PostBootenvParams) middleware.Responder {
	return fn(params)
}

// PostBootenvHandler interface for that can handle valid post bootenv params
type PostBootenvHandler interface {
	Handle(PostBootenvParams) middleware.Responder
}

// NewPostBootenv creates a new http.Handler for the post bootenv operation
func NewPostBootenv(ctx *middleware.Context, handler PostBootenvHandler) *PostBootenv {
	return &PostBootenv{Context: ctx, Handler: handler}
}

/*PostBootenv swagger:route POST /bootenv Bootenvs postBootenv

Create Bootenv

*/
type PostBootenv struct {
	Context *middleware.Context
	Handler PostBootenvHandler
}

func (o *PostBootenv) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPostBootenvParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

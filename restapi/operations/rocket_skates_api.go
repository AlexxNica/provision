package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/galthaus/swagger-test/restapi/operations/bootenvs"
	"github.com/galthaus/swagger-test/restapi/operations/files"
	"github.com/galthaus/swagger-test/restapi/operations/isos"
	"github.com/galthaus/swagger-test/restapi/operations/machines"
	"github.com/galthaus/swagger-test/restapi/operations/templates"
)

// NewRocketSkatesAPI creates a new RocketSkates instance
func NewRocketSkatesAPI(spec *loads.Document) *RocketSkatesAPI {
	return &RocketSkatesAPI{
		handlers:        make(map[string]map[string]http.Handler),
		formats:         strfmt.Default,
		defaultConsumes: "application/json",
		defaultProduces: "application/json",
		ServerShutdown:  func() {},
		spec:            spec,
	}
}

/*RocketSkatesAPI Protocol for Bare Metal Provider */
type RocketSkatesAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer
	// BinConsumer registers a consumer for a "application/octet-stream" mime type
	BinConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer
	// BinProducer registers a producer for a "application/octet-stream" mime type
	BinProducer runtime.Producer

	// BootenvsDeleteBootenvHandler sets the operation handler for the delete bootenv operation
	BootenvsDeleteBootenvHandler bootenvs.DeleteBootenvHandler
	// FilesDeleteFileHandler sets the operation handler for the delete file operation
	FilesDeleteFileHandler files.DeleteFileHandler
	// IsosDeleteIsoHandler sets the operation handler for the delete iso operation
	IsosDeleteIsoHandler isos.DeleteIsoHandler
	// MachinesDeleteMachineHandler sets the operation handler for the delete machine operation
	MachinesDeleteMachineHandler machines.DeleteMachineHandler
	// TemplatesDeleteTemplateHandler sets the operation handler for the delete template operation
	TemplatesDeleteTemplateHandler templates.DeleteTemplateHandler
	// BootenvsGetBootenvHandler sets the operation handler for the get bootenv operation
	BootenvsGetBootenvHandler bootenvs.GetBootenvHandler
	// FilesGetFileHandler sets the operation handler for the get file operation
	FilesGetFileHandler files.GetFileHandler
	// IsosGetIsoHandler sets the operation handler for the get iso operation
	IsosGetIsoHandler isos.GetIsoHandler
	// MachinesGetMachineHandler sets the operation handler for the get machine operation
	MachinesGetMachineHandler machines.GetMachineHandler
	// TemplatesGetTemplateHandler sets the operation handler for the get template operation
	TemplatesGetTemplateHandler templates.GetTemplateHandler
	// BootenvsListBootenvsHandler sets the operation handler for the list bootenvs operation
	BootenvsListBootenvsHandler bootenvs.ListBootenvsHandler
	// FilesListFilesHandler sets the operation handler for the list files operation
	FilesListFilesHandler files.ListFilesHandler
	// IsosListIsosHandler sets the operation handler for the list isos operation
	IsosListIsosHandler isos.ListIsosHandler
	// MachinesListMachinesHandler sets the operation handler for the list machines operation
	MachinesListMachinesHandler machines.ListMachinesHandler
	// TemplatesListTemplatesHandler sets the operation handler for the list templates operation
	TemplatesListTemplatesHandler templates.ListTemplatesHandler
	// BootenvsPatchBootenvHandler sets the operation handler for the patch bootenv operation
	BootenvsPatchBootenvHandler bootenvs.PatchBootenvHandler
	// MachinesPatchMachineHandler sets the operation handler for the patch machine operation
	MachinesPatchMachineHandler machines.PatchMachineHandler
	// TemplatesPatchTemplateHandler sets the operation handler for the patch template operation
	TemplatesPatchTemplateHandler templates.PatchTemplateHandler
	// BootenvsPostBootenvHandler sets the operation handler for the post bootenv operation
	BootenvsPostBootenvHandler bootenvs.PostBootenvHandler
	// FilesPostFileHandler sets the operation handler for the post file operation
	FilesPostFileHandler files.PostFileHandler
	// IsosPostIsoHandler sets the operation handler for the post iso operation
	IsosPostIsoHandler isos.PostIsoHandler
	// MachinesPostMachineHandler sets the operation handler for the post machine operation
	MachinesPostMachineHandler machines.PostMachineHandler
	// TemplatesPostTemplateHandler sets the operation handler for the post template operation
	TemplatesPostTemplateHandler templates.PostTemplateHandler
	// BootenvsPutBootenvHandler sets the operation handler for the put bootenv operation
	BootenvsPutBootenvHandler bootenvs.PutBootenvHandler
	// MachinesPutMachineHandler sets the operation handler for the put machine operation
	MachinesPutMachineHandler machines.PutMachineHandler
	// TemplatesPutTemplateHandler sets the operation handler for the put template operation
	TemplatesPutTemplateHandler templates.PutTemplateHandler
	// TemplatesReplaceTemplateHandler sets the operation handler for the replace template operation
	TemplatesReplaceTemplateHandler templates.ReplaceTemplateHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *RocketSkatesAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *RocketSkatesAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *RocketSkatesAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *RocketSkatesAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *RocketSkatesAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *RocketSkatesAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *RocketSkatesAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the RocketSkatesAPI
func (o *RocketSkatesAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.BinConsumer == nil {
		unregistered = append(unregistered, "BinConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.BinProducer == nil {
		unregistered = append(unregistered, "BinProducer")
	}

	if o.BootenvsDeleteBootenvHandler == nil {
		unregistered = append(unregistered, "bootenvs.DeleteBootenvHandler")
	}

	if o.FilesDeleteFileHandler == nil {
		unregistered = append(unregistered, "files.DeleteFileHandler")
	}

	if o.IsosDeleteIsoHandler == nil {
		unregistered = append(unregistered, "isos.DeleteIsoHandler")
	}

	if o.MachinesDeleteMachineHandler == nil {
		unregistered = append(unregistered, "machines.DeleteMachineHandler")
	}

	if o.TemplatesDeleteTemplateHandler == nil {
		unregistered = append(unregistered, "templates.DeleteTemplateHandler")
	}

	if o.BootenvsGetBootenvHandler == nil {
		unregistered = append(unregistered, "bootenvs.GetBootenvHandler")
	}

	if o.FilesGetFileHandler == nil {
		unregistered = append(unregistered, "files.GetFileHandler")
	}

	if o.IsosGetIsoHandler == nil {
		unregistered = append(unregistered, "isos.GetIsoHandler")
	}

	if o.MachinesGetMachineHandler == nil {
		unregistered = append(unregistered, "machines.GetMachineHandler")
	}

	if o.TemplatesGetTemplateHandler == nil {
		unregistered = append(unregistered, "templates.GetTemplateHandler")
	}

	if o.BootenvsListBootenvsHandler == nil {
		unregistered = append(unregistered, "bootenvs.ListBootenvsHandler")
	}

	if o.FilesListFilesHandler == nil {
		unregistered = append(unregistered, "files.ListFilesHandler")
	}

	if o.IsosListIsosHandler == nil {
		unregistered = append(unregistered, "isos.ListIsosHandler")
	}

	if o.MachinesListMachinesHandler == nil {
		unregistered = append(unregistered, "machines.ListMachinesHandler")
	}

	if o.TemplatesListTemplatesHandler == nil {
		unregistered = append(unregistered, "templates.ListTemplatesHandler")
	}

	if o.BootenvsPatchBootenvHandler == nil {
		unregistered = append(unregistered, "bootenvs.PatchBootenvHandler")
	}

	if o.MachinesPatchMachineHandler == nil {
		unregistered = append(unregistered, "machines.PatchMachineHandler")
	}

	if o.TemplatesPatchTemplateHandler == nil {
		unregistered = append(unregistered, "templates.PatchTemplateHandler")
	}

	if o.BootenvsPostBootenvHandler == nil {
		unregistered = append(unregistered, "bootenvs.PostBootenvHandler")
	}

	if o.FilesPostFileHandler == nil {
		unregistered = append(unregistered, "files.PostFileHandler")
	}

	if o.IsosPostIsoHandler == nil {
		unregistered = append(unregistered, "isos.PostIsoHandler")
	}

	if o.MachinesPostMachineHandler == nil {
		unregistered = append(unregistered, "machines.PostMachineHandler")
	}

	if o.TemplatesPostTemplateHandler == nil {
		unregistered = append(unregistered, "templates.PostTemplateHandler")
	}

	if o.BootenvsPutBootenvHandler == nil {
		unregistered = append(unregistered, "bootenvs.PutBootenvHandler")
	}

	if o.MachinesPutMachineHandler == nil {
		unregistered = append(unregistered, "machines.PutMachineHandler")
	}

	if o.TemplatesPutTemplateHandler == nil {
		unregistered = append(unregistered, "templates.PutTemplateHandler")
	}

	if o.TemplatesReplaceTemplateHandler == nil {
		unregistered = append(unregistered, "templates.ReplaceTemplateHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *RocketSkatesAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *RocketSkatesAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	return nil

}

// ConsumersFor gets the consumers for the specified media types
func (o *RocketSkatesAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		case "application/octet-stream":
			result["application/octet-stream"] = o.BinConsumer

		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *RocketSkatesAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		case "application/octet-stream":
			result["application/octet-stream"] = o.BinProducer

		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *RocketSkatesAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the rocket skates API
func (o *RocketSkatesAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *RocketSkatesAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/bootenvs/{name}"] = bootenvs.NewDeleteBootenv(o.context, o.BootenvsDeleteBootenvHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/files/{path}"] = files.NewDeleteFile(o.context, o.FilesDeleteFileHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/isos/{name}"] = isos.NewDeleteIso(o.context, o.IsosDeleteIsoHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/machines/{uuid}"] = machines.NewDeleteMachine(o.context, o.MachinesDeleteMachineHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/templates/{uuid}"] = templates.NewDeleteTemplate(o.context, o.TemplatesDeleteTemplateHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/bootenvs/{name}"] = bootenvs.NewGetBootenv(o.context, o.BootenvsGetBootenvHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/files/{path}"] = files.NewGetFile(o.context, o.FilesGetFileHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/isos/{name}"] = isos.NewGetIso(o.context, o.IsosGetIsoHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/machines/{uuid}"] = machines.NewGetMachine(o.context, o.MachinesGetMachineHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/templates/{uuid}"] = templates.NewGetTemplate(o.context, o.TemplatesGetTemplateHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/bootenvs"] = bootenvs.NewListBootenvs(o.context, o.BootenvsListBootenvsHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/files"] = files.NewListFiles(o.context, o.FilesListFilesHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/isos"] = isos.NewListIsos(o.context, o.IsosListIsosHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/machines"] = machines.NewListMachines(o.context, o.MachinesListMachinesHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/templates"] = templates.NewListTemplates(o.context, o.TemplatesListTemplatesHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers[strings.ToUpper("PATCH")] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/bootenvs/{name}"] = bootenvs.NewPatchBootenv(o.context, o.BootenvsPatchBootenvHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers[strings.ToUpper("PATCH")] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/machines/{uuid}"] = machines.NewPatchMachine(o.context, o.MachinesPatchMachineHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers[strings.ToUpper("PATCH")] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/template/{uuid}"] = templates.NewPatchTemplate(o.context, o.TemplatesPatchTemplateHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/bootenv"] = bootenvs.NewPostBootenv(o.context, o.BootenvsPostBootenvHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/files/{path}"] = files.NewPostFile(o.context, o.FilesPostFileHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/isos/{name}"] = isos.NewPostIso(o.context, o.IsosPostIsoHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/machines"] = machines.NewPostMachine(o.context, o.MachinesPostMachineHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/templates"] = templates.NewPostTemplate(o.context, o.TemplatesPostTemplateHandler)

	if o.handlers["PUT"] == nil {
		o.handlers[strings.ToUpper("PUT")] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/bootenvs/{name}"] = bootenvs.NewPutBootenv(o.context, o.BootenvsPutBootenvHandler)

	if o.handlers["PUT"] == nil {
		o.handlers[strings.ToUpper("PUT")] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/machines/{uuid}"] = machines.NewPutMachine(o.context, o.MachinesPutMachineHandler)

	if o.handlers["PUT"] == nil {
		o.handlers[strings.ToUpper("PUT")] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/templates/{uuid}"] = templates.NewPutTemplate(o.context, o.TemplatesPutTemplateHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/templates/{uuid}"] = templates.NewReplaceTemplate(o.context, o.TemplatesReplaceTemplateHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *RocketSkatesAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middelware as you see fit
func (o *RocketSkatesAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

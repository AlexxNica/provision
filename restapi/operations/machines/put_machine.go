package machines

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
	"github.com/rackn/rocket-skates/models"
)

// PutMachineHandlerFunc turns a function with the right signature into a put machine handler
type PutMachineHandlerFunc func(PutMachineParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutMachineHandlerFunc) Handle(params PutMachineParams) middleware.Responder {
	return fn(params)
}

// PutMachineHandler interface for that can handle valid put machine params
type PutMachineHandler interface {
	Handle(PutMachineParams) middleware.Responder
}

// NewPutMachine creates a new http.Handler for the put machine operation
func NewPutMachine(ctx *middleware.Context, handler PutMachineHandler) *PutMachine {
	return &PutMachine{Context: ctx, Handler: handler}
}

/*PutMachine swagger:route PUT /machines/{uuid} Machines putMachine

Update Machine

*/
type PutMachine struct {
	Context *middleware.Context
	Handler PutMachineHandler
}

func (o *PutMachine) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPutMachineParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PutMachineOKBody put machine o k body
// swagger:model PutMachineOKBody
type PutMachineOKBody struct {

	// data
	// Required: true
	Data *models.MachineOutput `json:"Data"`

	// result
	// Required: true
	Result *models.Result `json:"Result"`
}

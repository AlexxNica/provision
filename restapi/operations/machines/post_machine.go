package machines

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/galthaus/swagger-test/models"
	middleware "github.com/go-openapi/runtime/middleware"
)

// PostMachineHandlerFunc turns a function with the right signature into a post machine handler
type PostMachineHandlerFunc func(PostMachineParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostMachineHandlerFunc) Handle(params PostMachineParams) middleware.Responder {
	return fn(params)
}

// PostMachineHandler interface for that can handle valid post machine params
type PostMachineHandler interface {
	Handle(PostMachineParams) middleware.Responder
}

// NewPostMachine creates a new http.Handler for the post machine operation
func NewPostMachine(ctx *middleware.Context, handler PostMachineHandler) *PostMachine {
	return &PostMachine{Context: ctx, Handler: handler}
}

/*PostMachine swagger:route POST /machines Machines postMachine

Create Machine

*/
type PostMachine struct {
	Context *middleware.Context
	Handler PostMachineHandler
}

func (o *PostMachine) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPostMachineParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostMachineCreatedBody post machine created body
// swagger:model PostMachineCreatedBody
type PostMachineCreatedBody struct {

	// data
	// Required: true
	Data *models.MachineOutput `json:"Data"`

	// result
	// Required: true
	Result *models.Result `json:"Result"`
}

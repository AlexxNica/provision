package files

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/galthaus/swagger-test/models"
)

/*PostFileCreated post file created

swagger:response postFileCreated
*/
type PostFileCreated struct {

	/*
	  In: Body
	*/
	Payload PostFileCreatedBody `json:"body,omitempty"`
}

// NewPostFileCreated creates PostFileCreated with default headers values
func NewPostFileCreated() *PostFileCreated {
	return &PostFileCreated{}
}

// WithPayload adds the payload to the post file created response
func (o *PostFileCreated) WithPayload(payload PostFileCreatedBody) *PostFileCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post file created response
func (o *PostFileCreated) SetPayload(payload PostFileCreatedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostFileCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*PostFileBadRequest post file bad request

swagger:response postFileBadRequest
*/
type PostFileBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Result `json:"body,omitempty"`
}

// NewPostFileBadRequest creates PostFileBadRequest with default headers values
func NewPostFileBadRequest() *PostFileBadRequest {
	return &PostFileBadRequest{}
}

// WithPayload adds the payload to the post file bad request response
func (o *PostFileBadRequest) WithPayload(payload *models.Result) *PostFileBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post file bad request response
func (o *PostFileBadRequest) SetPayload(payload *models.Result) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostFileBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PostFileConflict post file conflict

swagger:response postFileConflict
*/
type PostFileConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Result `json:"body,omitempty"`
}

// NewPostFileConflict creates PostFileConflict with default headers values
func NewPostFileConflict() *PostFileConflict {
	return &PostFileConflict{}
}

// WithPayload adds the payload to the post file conflict response
func (o *PostFileConflict) WithPayload(payload *models.Result) *PostFileConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post file conflict response
func (o *PostFileConflict) SetPayload(payload *models.Result) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostFileConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PostFileInsufficientStorage post file insufficient storage

swagger:response postFileInsufficientStorage
*/
type PostFileInsufficientStorage struct {

	/*
	  In: Body
	*/
	Payload *models.Result `json:"body,omitempty"`
}

// NewPostFileInsufficientStorage creates PostFileInsufficientStorage with default headers values
func NewPostFileInsufficientStorage() *PostFileInsufficientStorage {
	return &PostFileInsufficientStorage{}
}

// WithPayload adds the payload to the post file insufficient storage response
func (o *PostFileInsufficientStorage) WithPayload(payload *models.Result) *PostFileInsufficientStorage {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post file insufficient storage response
func (o *PostFileInsufficientStorage) SetPayload(payload *models.Result) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostFileInsufficientStorage) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(507)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

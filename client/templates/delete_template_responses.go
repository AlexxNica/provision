package templates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/galthaus/swagger-test/models"
)

// DeleteTemplateReader is a Reader for the DeleteTemplate structure.
type DeleteTemplateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteTemplateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewDeleteTemplateNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewDeleteTemplateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewDeleteTemplateConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewDeleteTemplateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteTemplateNoContent creates a DeleteTemplateNoContent with default headers values
func NewDeleteTemplateNoContent() *DeleteTemplateNoContent {
	return &DeleteTemplateNoContent{}
}

/*DeleteTemplateNoContent handles this case with default header values.

DeleteTemplateNoContent delete template no content
*/
type DeleteTemplateNoContent struct {
}

func (o *DeleteTemplateNoContent) Error() string {
	return fmt.Sprintf("[DELETE /templates/{uuid}][%d] deleteTemplateNoContent ", 204)
}

func (o *DeleteTemplateNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteTemplateNotFound creates a DeleteTemplateNotFound with default headers values
func NewDeleteTemplateNotFound() *DeleteTemplateNotFound {
	return &DeleteTemplateNotFound{}
}

/*DeleteTemplateNotFound handles this case with default header values.

DeleteTemplateNotFound delete template not found
*/
type DeleteTemplateNotFound struct {
	Payload *models.Result
}

func (o *DeleteTemplateNotFound) Error() string {
	return fmt.Sprintf("[DELETE /templates/{uuid}][%d] deleteTemplateNotFound  %+v", 404, o.Payload)
}

func (o *DeleteTemplateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Result)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTemplateConflict creates a DeleteTemplateConflict with default headers values
func NewDeleteTemplateConflict() *DeleteTemplateConflict {
	return &DeleteTemplateConflict{}
}

/*DeleteTemplateConflict handles this case with default header values.

DeleteTemplateConflict delete template conflict
*/
type DeleteTemplateConflict struct {
	Payload *models.Result
}

func (o *DeleteTemplateConflict) Error() string {
	return fmt.Sprintf("[DELETE /templates/{uuid}][%d] deleteTemplateConflict  %+v", 409, o.Payload)
}

func (o *DeleteTemplateConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Result)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTemplateInternalServerError creates a DeleteTemplateInternalServerError with default headers values
func NewDeleteTemplateInternalServerError() *DeleteTemplateInternalServerError {
	return &DeleteTemplateInternalServerError{}
}

/*DeleteTemplateInternalServerError handles this case with default header values.

DeleteTemplateInternalServerError delete template internal server error
*/
type DeleteTemplateInternalServerError struct {
	Payload *models.Result
}

func (o *DeleteTemplateInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /templates/{uuid}][%d] deleteTemplateInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteTemplateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Result)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

package templates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/rackn/rocket-skates/models"
)

// PatchTemplateReader is a Reader for the PatchTemplate structure.
type PatchTemplateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchTemplateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 202:
		result := NewPatchTemplateAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewPatchTemplateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPatchTemplateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 417:
		result := NewPatchTemplateExpectationFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewPatchTemplateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchTemplateAccepted creates a PatchTemplateAccepted with default headers values
func NewPatchTemplateAccepted() *PatchTemplateAccepted {
	return &PatchTemplateAccepted{}
}

/*PatchTemplateAccepted handles this case with default header values.

PatchTemplateAccepted patch template accepted
*/
type PatchTemplateAccepted struct {
	Payload *models.TemplateOutput
}

func (o *PatchTemplateAccepted) Error() string {
	return fmt.Sprintf("[PATCH /template/{uuid}][%d] patchTemplateAccepted  %+v", 202, o.Payload)
}

func (o *PatchTemplateAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TemplateOutput)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchTemplateUnauthorized creates a PatchTemplateUnauthorized with default headers values
func NewPatchTemplateUnauthorized() *PatchTemplateUnauthorized {
	return &PatchTemplateUnauthorized{}
}

/*PatchTemplateUnauthorized handles this case with default header values.

PatchTemplateUnauthorized patch template unauthorized
*/
type PatchTemplateUnauthorized struct {
	Payload *models.Result
}

func (o *PatchTemplateUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /template/{uuid}][%d] patchTemplateUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchTemplateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Result)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchTemplateNotFound creates a PatchTemplateNotFound with default headers values
func NewPatchTemplateNotFound() *PatchTemplateNotFound {
	return &PatchTemplateNotFound{}
}

/*PatchTemplateNotFound handles this case with default header values.

PatchTemplateNotFound patch template not found
*/
type PatchTemplateNotFound struct {
	Payload *models.Result
}

func (o *PatchTemplateNotFound) Error() string {
	return fmt.Sprintf("[PATCH /template/{uuid}][%d] patchTemplateNotFound  %+v", 404, o.Payload)
}

func (o *PatchTemplateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Result)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchTemplateExpectationFailed creates a PatchTemplateExpectationFailed with default headers values
func NewPatchTemplateExpectationFailed() *PatchTemplateExpectationFailed {
	return &PatchTemplateExpectationFailed{}
}

/*PatchTemplateExpectationFailed handles this case with default header values.

PatchTemplateExpectationFailed patch template expectation failed
*/
type PatchTemplateExpectationFailed struct {
	Payload *models.Result
}

func (o *PatchTemplateExpectationFailed) Error() string {
	return fmt.Sprintf("[PATCH /template/{uuid}][%d] patchTemplateExpectationFailed  %+v", 417, o.Payload)
}

func (o *PatchTemplateExpectationFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Result)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchTemplateInternalServerError creates a PatchTemplateInternalServerError with default headers values
func NewPatchTemplateInternalServerError() *PatchTemplateInternalServerError {
	return &PatchTemplateInternalServerError{}
}

/*PatchTemplateInternalServerError handles this case with default header values.

PatchTemplateInternalServerError patch template internal server error
*/
type PatchTemplateInternalServerError struct {
	Payload *models.Result
}

func (o *PatchTemplateInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /template/{uuid}][%d] patchTemplateInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchTemplateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Result)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

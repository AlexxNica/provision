package templates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new templates API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for templates API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteTemplate deletes template
*/
func (a *Client) DeleteTemplate(params *DeleteTemplateParams) (*DeleteTemplateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete-template",
		Method:             "DELETE",
		PathPattern:        "/templates/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteTemplateNoContent), nil

}

/*
GetTemplate gets template
*/
func (a *Client) GetTemplate(params *GetTemplateParams) (*GetTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-template",
		Method:             "GET",
		PathPattern:        "/templates/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTemplateOK), nil

}

/*
ListTemplates lists templates
*/
func (a *Client) ListTemplates(params *ListTemplatesParams) (*ListTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTemplatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "list-templates",
		Method:             "GET",
		PathPattern:        "/templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListTemplatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListTemplatesOK), nil

}

/*
PatchTemplate patches template
*/
func (a *Client) PatchTemplate(params *PatchTemplateParams) (*PatchTemplateAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patch-template",
		Method:             "PATCH",
		PathPattern:        "/template/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchTemplateAccepted), nil

}

/*
PostTemplate creates template
*/
func (a *Client) PostTemplate(params *PostTemplateParams) (*PostTemplateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "post-template",
		Method:             "POST",
		PathPattern:        "/templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTemplateCreated), nil

}

/*
PutTemplate updates template
*/
func (a *Client) PutTemplate(params *PutTemplateParams) (*PutTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "put-template",
		Method:             "PUT",
		PathPattern:        "/templates/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutTemplateOK), nil

}

/*
ReplaceTemplate replaces template
*/
func (a *Client) ReplaceTemplate(params *ReplaceTemplateParams) (*ReplaceTemplateCreated, *ReplaceTemplateAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replace-template",
		Method:             "POST",
		PathPattern:        "/templates/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/octet-stream"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceTemplateCreated:
		return value, nil, nil
	case *ReplaceTemplateAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

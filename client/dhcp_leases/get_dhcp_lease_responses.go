package dhcp_leases

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/rackn/rocket-skates/models"
)

// GetDhcpLeaseReader is a Reader for the GetDhcpLease structure.
type GetDhcpLeaseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDhcpLeaseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetDhcpLeaseOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetDhcpLeaseUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetDhcpLeaseNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetDhcpLeaseInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetDhcpLeaseOK creates a GetDhcpLeaseOK with default headers values
func NewGetDhcpLeaseOK() *GetDhcpLeaseOK {
	return &GetDhcpLeaseOK{}
}

/*GetDhcpLeaseOK handles this case with default header values.

GetDhcpLeaseOK get dhcp lease o k
*/
type GetDhcpLeaseOK struct {
	Payload *models.DhcpLeaseInput
}

func (o *GetDhcpLeaseOK) Error() string {
	return fmt.Sprintf("[GET /leases/{id}][%d] getDhcpLeaseOK  %+v", 200, o.Payload)
}

func (o *GetDhcpLeaseOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DhcpLeaseInput)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDhcpLeaseUnauthorized creates a GetDhcpLeaseUnauthorized with default headers values
func NewGetDhcpLeaseUnauthorized() *GetDhcpLeaseUnauthorized {
	return &GetDhcpLeaseUnauthorized{}
}

/*GetDhcpLeaseUnauthorized handles this case with default header values.

GetDhcpLeaseUnauthorized get dhcp lease unauthorized
*/
type GetDhcpLeaseUnauthorized struct {
	Payload *models.Error
}

func (o *GetDhcpLeaseUnauthorized) Error() string {
	return fmt.Sprintf("[GET /leases/{id}][%d] getDhcpLeaseUnauthorized  %+v", 401, o.Payload)
}

func (o *GetDhcpLeaseUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDhcpLeaseNotFound creates a GetDhcpLeaseNotFound with default headers values
func NewGetDhcpLeaseNotFound() *GetDhcpLeaseNotFound {
	return &GetDhcpLeaseNotFound{}
}

/*GetDhcpLeaseNotFound handles this case with default header values.

GetDhcpLeaseNotFound get dhcp lease not found
*/
type GetDhcpLeaseNotFound struct {
	Payload *models.Error
}

func (o *GetDhcpLeaseNotFound) Error() string {
	return fmt.Sprintf("[GET /leases/{id}][%d] getDhcpLeaseNotFound  %+v", 404, o.Payload)
}

func (o *GetDhcpLeaseNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDhcpLeaseInternalServerError creates a GetDhcpLeaseInternalServerError with default headers values
func NewGetDhcpLeaseInternalServerError() *GetDhcpLeaseInternalServerError {
	return &GetDhcpLeaseInternalServerError{}
}

/*GetDhcpLeaseInternalServerError handles this case with default header values.

GetDhcpLeaseInternalServerError get dhcp lease internal server error
*/
type GetDhcpLeaseInternalServerError struct {
	Payload *models.Error
}

func (o *GetDhcpLeaseInternalServerError) Error() string {
	return fmt.Sprintf("[GET /leases/{id}][%d] getDhcpLeaseInternalServerError  %+v", 500, o.Payload)
}

func (o *GetDhcpLeaseInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

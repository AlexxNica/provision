package dhcp_leases

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/rackn/rocket-skates/models"
)

// PutDhcpLeaseReader is a Reader for the PutDhcpLease structure.
type PutDhcpLeaseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutDhcpLeaseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPutDhcpLeaseOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewPutDhcpLeaseUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPutDhcpLeaseNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewPutDhcpLeaseConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewPutDhcpLeaseInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPutDhcpLeaseOK creates a PutDhcpLeaseOK with default headers values
func NewPutDhcpLeaseOK() *PutDhcpLeaseOK {
	return &PutDhcpLeaseOK{}
}

/*PutDhcpLeaseOK handles this case with default header values.

PutDhcpLeaseOK put dhcp lease o k
*/
type PutDhcpLeaseOK struct {
	Payload *models.DhcpLeaseInput
}

func (o *PutDhcpLeaseOK) Error() string {
	return fmt.Sprintf("[PUT /leases/{id}][%d] putDhcpLeaseOK  %+v", 200, o.Payload)
}

func (o *PutDhcpLeaseOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DhcpLeaseInput)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDhcpLeaseUnauthorized creates a PutDhcpLeaseUnauthorized with default headers values
func NewPutDhcpLeaseUnauthorized() *PutDhcpLeaseUnauthorized {
	return &PutDhcpLeaseUnauthorized{}
}

/*PutDhcpLeaseUnauthorized handles this case with default header values.

PutDhcpLeaseUnauthorized put dhcp lease unauthorized
*/
type PutDhcpLeaseUnauthorized struct {
	Payload *models.Error
}

func (o *PutDhcpLeaseUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /leases/{id}][%d] putDhcpLeaseUnauthorized  %+v", 401, o.Payload)
}

func (o *PutDhcpLeaseUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDhcpLeaseNotFound creates a PutDhcpLeaseNotFound with default headers values
func NewPutDhcpLeaseNotFound() *PutDhcpLeaseNotFound {
	return &PutDhcpLeaseNotFound{}
}

/*PutDhcpLeaseNotFound handles this case with default header values.

PutDhcpLeaseNotFound put dhcp lease not found
*/
type PutDhcpLeaseNotFound struct {
	Payload *models.Error
}

func (o *PutDhcpLeaseNotFound) Error() string {
	return fmt.Sprintf("[PUT /leases/{id}][%d] putDhcpLeaseNotFound  %+v", 404, o.Payload)
}

func (o *PutDhcpLeaseNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDhcpLeaseConflict creates a PutDhcpLeaseConflict with default headers values
func NewPutDhcpLeaseConflict() *PutDhcpLeaseConflict {
	return &PutDhcpLeaseConflict{}
}

/*PutDhcpLeaseConflict handles this case with default header values.

PutDhcpLeaseConflict put dhcp lease conflict
*/
type PutDhcpLeaseConflict struct {
	Payload *models.Error
}

func (o *PutDhcpLeaseConflict) Error() string {
	return fmt.Sprintf("[PUT /leases/{id}][%d] putDhcpLeaseConflict  %+v", 409, o.Payload)
}

func (o *PutDhcpLeaseConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDhcpLeaseInternalServerError creates a PutDhcpLeaseInternalServerError with default headers values
func NewPutDhcpLeaseInternalServerError() *PutDhcpLeaseInternalServerError {
	return &PutDhcpLeaseInternalServerError{}
}

/*PutDhcpLeaseInternalServerError handles this case with default header values.

PutDhcpLeaseInternalServerError put dhcp lease internal server error
*/
type PutDhcpLeaseInternalServerError struct {
	Payload *models.Error
}

func (o *PutDhcpLeaseInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /leases/{id}][%d] putDhcpLeaseInternalServerError  %+v", 500, o.Payload)
}

func (o *PutDhcpLeaseInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

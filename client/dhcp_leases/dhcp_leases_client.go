package dhcp_leases

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new dhcp leases API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for dhcp leases API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DELETEDhcpLease deletes d h c p lease
*/
func (a *Client) DELETEDhcpLease(params *DELETEDhcpLeaseParams, authInfo runtime.ClientAuthInfoWriter) (*DELETEDhcpLeaseNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDELETEDhcpLeaseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DELETE-dhcp-lease",
		Method:             "DELETE",
		PathPattern:        "/leases/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DELETEDhcpLeaseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DELETEDhcpLeaseNoContent), nil

}

/*
GETDhcpLease gets d h c p lease
*/
func (a *Client) GETDhcpLease(params *GETDhcpLeaseParams, authInfo runtime.ClientAuthInfoWriter) (*GETDhcpLeaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETDhcpLeaseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GET-dhcp-lease",
		Method:             "GET",
		PathPattern:        "/leases/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETDhcpLeaseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GETDhcpLeaseOK), nil

}

/*
LISTDhcpLeases lists dhcp leases
*/
func (a *Client) LISTDhcpLeases(params *LISTDhcpLeasesParams, authInfo runtime.ClientAuthInfoWriter) (*LISTDhcpLeasesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLISTDhcpLeasesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LIST-dhcp-leases",
		Method:             "GET",
		PathPattern:        "/leases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LISTDhcpLeasesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LISTDhcpLeasesOK), nil

}

/*
POSTDhcpLease creates d h c p lease
*/
func (a *Client) POSTDhcpLease(params *POSTDhcpLeaseParams, authInfo runtime.ClientAuthInfoWriter) (*POSTDhcpLeaseCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPOSTDhcpLeaseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "POST-dhcp-lease",
		Method:             "POST",
		PathPattern:        "/leases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &POSTDhcpLeaseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*POSTDhcpLeaseCreated), nil

}

/*
PUTDhcpLease updates d h c p lease
*/
func (a *Client) PUTDhcpLease(params *PUTDhcpLeaseParams, authInfo runtime.ClientAuthInfoWriter) (*PUTDhcpLeaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPUTDhcpLeaseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PUT-dhcp-lease",
		Method:             "PUT",
		PathPattern:        "/leases/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PUTDhcpLeaseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PUTDhcpLeaseOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

package dhcp_leases

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new dhcp leases API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for dhcp leases API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteDhcpLease deletes d h c p lease
*/
func (a *Client) DeleteDhcpLease(params *DeleteDhcpLeaseParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDhcpLeaseNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDhcpLeaseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete-dhcp-lease",
		Method:             "DELETE",
		PathPattern:        "/leases/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDhcpLeaseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDhcpLeaseNoContent), nil

}

/*
GetDhcpLease gets d h c p lease
*/
func (a *Client) GetDhcpLease(params *GetDhcpLeaseParams, authInfo runtime.ClientAuthInfoWriter) (*GetDhcpLeaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDhcpLeaseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-dhcp-lease",
		Method:             "GET",
		PathPattern:        "/leases/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDhcpLeaseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDhcpLeaseOK), nil

}

/*
ListDhcpLeases lists dhcp leases
*/
func (a *Client) ListDhcpLeases(params *ListDhcpLeasesParams, authInfo runtime.ClientAuthInfoWriter) (*ListDhcpLeasesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListDhcpLeasesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "list-dhcp-leases",
		Method:             "GET",
		PathPattern:        "/leases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListDhcpLeasesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListDhcpLeasesOK), nil

}

/*
PostDhcpLease creates d h c p lease
*/
func (a *Client) PostDhcpLease(params *PostDhcpLeaseParams, authInfo runtime.ClientAuthInfoWriter) (*PostDhcpLeaseCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDhcpLeaseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "post-dhcp-lease",
		Method:             "POST",
		PathPattern:        "/leases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDhcpLeaseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDhcpLeaseCreated), nil

}

/*
PutDhcpLease updates d h c p lease
*/
func (a *Client) PutDhcpLease(params *PutDhcpLeaseParams, authInfo runtime.ClientAuthInfoWriter) (*PutDhcpLeaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDhcpLeaseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "put-dhcp-lease",
		Method:             "PUT",
		PathPattern:        "/leases/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutDhcpLeaseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutDhcpLeaseOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

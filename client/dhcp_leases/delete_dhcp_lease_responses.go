package dhcp_leases

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/rackn/rocket-skates/models"
)

// DeleteDhcpLeaseReader is a Reader for the DeleteDhcpLease structure.
type DeleteDhcpLeaseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteDhcpLeaseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewDeleteDhcpLeaseNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewDeleteDhcpLeaseUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDeleteDhcpLeaseNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewDeleteDhcpLeaseConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewDeleteDhcpLeaseInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteDhcpLeaseNoContent creates a DeleteDhcpLeaseNoContent with default headers values
func NewDeleteDhcpLeaseNoContent() *DeleteDhcpLeaseNoContent {
	return &DeleteDhcpLeaseNoContent{}
}

/*DeleteDhcpLeaseNoContent handles this case with default header values.

DeleteDhcpLeaseNoContent delete dhcp lease no content
*/
type DeleteDhcpLeaseNoContent struct {
}

func (o *DeleteDhcpLeaseNoContent) Error() string {
	return fmt.Sprintf("[DELETE /leases/{id}][%d] deleteDhcpLeaseNoContent ", 204)
}

func (o *DeleteDhcpLeaseNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteDhcpLeaseUnauthorized creates a DeleteDhcpLeaseUnauthorized with default headers values
func NewDeleteDhcpLeaseUnauthorized() *DeleteDhcpLeaseUnauthorized {
	return &DeleteDhcpLeaseUnauthorized{}
}

/*DeleteDhcpLeaseUnauthorized handles this case with default header values.

DeleteDhcpLeaseUnauthorized delete dhcp lease unauthorized
*/
type DeleteDhcpLeaseUnauthorized struct {
	Payload *models.Error
}

func (o *DeleteDhcpLeaseUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /leases/{id}][%d] deleteDhcpLeaseUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteDhcpLeaseUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteDhcpLeaseNotFound creates a DeleteDhcpLeaseNotFound with default headers values
func NewDeleteDhcpLeaseNotFound() *DeleteDhcpLeaseNotFound {
	return &DeleteDhcpLeaseNotFound{}
}

/*DeleteDhcpLeaseNotFound handles this case with default header values.

DeleteDhcpLeaseNotFound delete dhcp lease not found
*/
type DeleteDhcpLeaseNotFound struct {
	Payload *models.Error
}

func (o *DeleteDhcpLeaseNotFound) Error() string {
	return fmt.Sprintf("[DELETE /leases/{id}][%d] deleteDhcpLeaseNotFound  %+v", 404, o.Payload)
}

func (o *DeleteDhcpLeaseNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteDhcpLeaseConflict creates a DeleteDhcpLeaseConflict with default headers values
func NewDeleteDhcpLeaseConflict() *DeleteDhcpLeaseConflict {
	return &DeleteDhcpLeaseConflict{}
}

/*DeleteDhcpLeaseConflict handles this case with default header values.

DeleteDhcpLeaseConflict delete dhcp lease conflict
*/
type DeleteDhcpLeaseConflict struct {
	Payload *models.Error
}

func (o *DeleteDhcpLeaseConflict) Error() string {
	return fmt.Sprintf("[DELETE /leases/{id}][%d] deleteDhcpLeaseConflict  %+v", 409, o.Payload)
}

func (o *DeleteDhcpLeaseConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteDhcpLeaseInternalServerError creates a DeleteDhcpLeaseInternalServerError with default headers values
func NewDeleteDhcpLeaseInternalServerError() *DeleteDhcpLeaseInternalServerError {
	return &DeleteDhcpLeaseInternalServerError{}
}

/*DeleteDhcpLeaseInternalServerError handles this case with default header values.

DeleteDhcpLeaseInternalServerError delete dhcp lease internal server error
*/
type DeleteDhcpLeaseInternalServerError struct {
	Payload *models.Error
}

func (o *DeleteDhcpLeaseInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /leases/{id}][%d] deleteDhcpLeaseInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteDhcpLeaseInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

package dhcp_leases

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/rackn/rocket-skates/models"
)

// ListDhcpLeasesReader is a Reader for the ListDhcpLeases structure.
type ListDhcpLeasesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListDhcpLeasesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewListDhcpLeasesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewListDhcpLeasesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewListDhcpLeasesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewListDhcpLeasesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListDhcpLeasesOK creates a ListDhcpLeasesOK with default headers values
func NewListDhcpLeasesOK() *ListDhcpLeasesOK {
	return &ListDhcpLeasesOK{}
}

/*ListDhcpLeasesOK handles this case with default header values.

ListDhcpLeasesOK list dhcp leases o k
*/
type ListDhcpLeasesOK struct {
	Payload []*models.DhcpLeaseInput
}

func (o *ListDhcpLeasesOK) Error() string {
	return fmt.Sprintf("[GET /leases][%d] listDhcpLeasesOK  %+v", 200, o.Payload)
}

func (o *ListDhcpLeasesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListDhcpLeasesUnauthorized creates a ListDhcpLeasesUnauthorized with default headers values
func NewListDhcpLeasesUnauthorized() *ListDhcpLeasesUnauthorized {
	return &ListDhcpLeasesUnauthorized{}
}

/*ListDhcpLeasesUnauthorized handles this case with default header values.

ListDhcpLeasesUnauthorized list dhcp leases unauthorized
*/
type ListDhcpLeasesUnauthorized struct {
	Payload *models.Error
}

func (o *ListDhcpLeasesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /leases][%d] listDhcpLeasesUnauthorized  %+v", 401, o.Payload)
}

func (o *ListDhcpLeasesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListDhcpLeasesNotFound creates a ListDhcpLeasesNotFound with default headers values
func NewListDhcpLeasesNotFound() *ListDhcpLeasesNotFound {
	return &ListDhcpLeasesNotFound{}
}

/*ListDhcpLeasesNotFound handles this case with default header values.

ListDhcpLeasesNotFound list dhcp leases not found
*/
type ListDhcpLeasesNotFound struct {
	Payload *models.Error
}

func (o *ListDhcpLeasesNotFound) Error() string {
	return fmt.Sprintf("[GET /leases][%d] listDhcpLeasesNotFound  %+v", 404, o.Payload)
}

func (o *ListDhcpLeasesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListDhcpLeasesInternalServerError creates a ListDhcpLeasesInternalServerError with default headers values
func NewListDhcpLeasesInternalServerError() *ListDhcpLeasesInternalServerError {
	return &ListDhcpLeasesInternalServerError{}
}

/*ListDhcpLeasesInternalServerError handles this case with default header values.

ListDhcpLeasesInternalServerError list dhcp leases internal server error
*/
type ListDhcpLeasesInternalServerError struct {
	Payload *models.Error
}

func (o *ListDhcpLeasesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /leases][%d] listDhcpLeasesInternalServerError  %+v", 500, o.Payload)
}

func (o *ListDhcpLeasesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

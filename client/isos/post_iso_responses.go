package isos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/rackn/rocket-skates/models"
)

// PostIsoReader is a Reader for the PostIso structure.
type PostIsoReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostIsoReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewPostIsoCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPostIsoBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewPostIsoConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 507:
		result := NewPostIsoInsufficientStorage()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostIsoCreated creates a PostIsoCreated with default headers values
func NewPostIsoCreated() *PostIsoCreated {
	return &PostIsoCreated{}
}

/*PostIsoCreated handles this case with default header values.

PostIsoCreated post iso created
*/
type PostIsoCreated struct {
	Payload PostIsoCreatedBody
}

func (o *PostIsoCreated) Error() string {
	return fmt.Sprintf("[POST /isos/{name}][%d] postIsoCreated  %+v", 201, o.Payload)
}

func (o *PostIsoCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostIsoBadRequest creates a PostIsoBadRequest with default headers values
func NewPostIsoBadRequest() *PostIsoBadRequest {
	return &PostIsoBadRequest{}
}

/*PostIsoBadRequest handles this case with default header values.

PostIsoBadRequest post iso bad request
*/
type PostIsoBadRequest struct {
	Payload *models.Result
}

func (o *PostIsoBadRequest) Error() string {
	return fmt.Sprintf("[POST /isos/{name}][%d] postIsoBadRequest  %+v", 400, o.Payload)
}

func (o *PostIsoBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Result)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostIsoConflict creates a PostIsoConflict with default headers values
func NewPostIsoConflict() *PostIsoConflict {
	return &PostIsoConflict{}
}

/*PostIsoConflict handles this case with default header values.

PostIsoConflict post iso conflict
*/
type PostIsoConflict struct {
	Payload *models.Result
}

func (o *PostIsoConflict) Error() string {
	return fmt.Sprintf("[POST /isos/{name}][%d] postIsoConflict  %+v", 409, o.Payload)
}

func (o *PostIsoConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Result)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostIsoInsufficientStorage creates a PostIsoInsufficientStorage with default headers values
func NewPostIsoInsufficientStorage() *PostIsoInsufficientStorage {
	return &PostIsoInsufficientStorage{}
}

/*PostIsoInsufficientStorage handles this case with default header values.

PostIsoInsufficientStorage post iso insufficient storage
*/
type PostIsoInsufficientStorage struct {
	Payload *models.Result
}

func (o *PostIsoInsufficientStorage) Error() string {
	return fmt.Sprintf("[POST /isos/{name}][%d] postIsoInsufficientStorage  %+v", 507, o.Payload)
}

func (o *PostIsoInsufficientStorage) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Result)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PostIsoCreatedBody post iso created body
swagger:model PostIsoCreatedBody
*/
type PostIsoCreatedBody struct {

	// name
	// Required: true
	Name *string `json:"Name"`

	// size
	// Required: true
	Size *int64 `json:"Size"`
}

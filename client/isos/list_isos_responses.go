package isos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/galthaus/swagger-test/models"
)

// ListIsosReader is a Reader for the ListIsos structure.
type ListIsosReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListIsosReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewListIsosOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewListIsosUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewListIsosNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewListIsosInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListIsosOK creates a ListIsosOK with default headers values
func NewListIsosOK() *ListIsosOK {
	return &ListIsosOK{}
}

/*ListIsosOK handles this case with default header values.

ListIsosOK list isos o k
*/
type ListIsosOK struct {
	Payload []string
}

func (o *ListIsosOK) Error() string {
	return fmt.Sprintf("[GET /isos][%d] listIsosOK  %+v", 200, o.Payload)
}

func (o *ListIsosOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListIsosUnauthorized creates a ListIsosUnauthorized with default headers values
func NewListIsosUnauthorized() *ListIsosUnauthorized {
	return &ListIsosUnauthorized{}
}

/*ListIsosUnauthorized handles this case with default header values.

ListIsosUnauthorized list isos unauthorized
*/
type ListIsosUnauthorized struct {
	Payload *models.Result
}

func (o *ListIsosUnauthorized) Error() string {
	return fmt.Sprintf("[GET /isos][%d] listIsosUnauthorized  %+v", 401, o.Payload)
}

func (o *ListIsosUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Result)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListIsosNotFound creates a ListIsosNotFound with default headers values
func NewListIsosNotFound() *ListIsosNotFound {
	return &ListIsosNotFound{}
}

/*ListIsosNotFound handles this case with default header values.

ListIsosNotFound list isos not found
*/
type ListIsosNotFound struct {
	Payload *models.Result
}

func (o *ListIsosNotFound) Error() string {
	return fmt.Sprintf("[GET /isos][%d] listIsosNotFound  %+v", 404, o.Payload)
}

func (o *ListIsosNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Result)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListIsosInternalServerError creates a ListIsosInternalServerError with default headers values
func NewListIsosInternalServerError() *ListIsosInternalServerError {
	return &ListIsosInternalServerError{}
}

/*ListIsosInternalServerError handles this case with default header values.

ListIsosInternalServerError list isos internal server error
*/
type ListIsosInternalServerError struct {
	Payload *models.Result
}

func (o *ListIsosInternalServerError) Error() string {
	return fmt.Sprintf("[GET /isos][%d] listIsosInternalServerError  %+v", 500, o.Payload)
}

func (o *ListIsosInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Result)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

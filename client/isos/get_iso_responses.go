package isos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/rackn/rocket-skates/models"
)

// GetIsoReader is a Reader for the GetIso structure.
type GetIsoReader struct {
	formats strfmt.Registry
	writer  io.Writer
}

// ReadResponse reads a server response into the received o.
func (o *GetIsoReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetIsoOK(o.writer)
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetIsoUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetIsoNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetIsoInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetIsoOK creates a GetIsoOK with default headers values
func NewGetIsoOK(writer io.Writer) *GetIsoOK {
	return &GetIsoOK{
		Payload: writer,
	}
}

/*GetIsoOK handles this case with default header values.

GetIsoOK get iso o k
*/
type GetIsoOK struct {
	Payload io.Writer
}

func (o *GetIsoOK) Error() string {
	return fmt.Sprintf("[GET /isos/{name}][%d] getIsoOK  %+v", 200, o.Payload)
}

func (o *GetIsoOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIsoUnauthorized creates a GetIsoUnauthorized with default headers values
func NewGetIsoUnauthorized() *GetIsoUnauthorized {
	return &GetIsoUnauthorized{}
}

/*GetIsoUnauthorized handles this case with default header values.

GetIsoUnauthorized get iso unauthorized
*/
type GetIsoUnauthorized struct {
	Payload *models.Error
}

func (o *GetIsoUnauthorized) Error() string {
	return fmt.Sprintf("[GET /isos/{name}][%d] getIsoUnauthorized  %+v", 401, o.Payload)
}

func (o *GetIsoUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIsoNotFound creates a GetIsoNotFound with default headers values
func NewGetIsoNotFound() *GetIsoNotFound {
	return &GetIsoNotFound{}
}

/*GetIsoNotFound handles this case with default header values.

GetIsoNotFound get iso not found
*/
type GetIsoNotFound struct {
	Payload *models.Error
}

func (o *GetIsoNotFound) Error() string {
	return fmt.Sprintf("[GET /isos/{name}][%d] getIsoNotFound  %+v", 404, o.Payload)
}

func (o *GetIsoNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIsoInternalServerError creates a GetIsoInternalServerError with default headers values
func NewGetIsoInternalServerError() *GetIsoInternalServerError {
	return &GetIsoInternalServerError{}
}

/*GetIsoInternalServerError handles this case with default header values.

GetIsoInternalServerError get iso internal server error
*/
type GetIsoInternalServerError struct {
	Payload *models.Error
}

func (o *GetIsoInternalServerError) Error() string {
	return fmt.Sprintf("[GET /isos/{name}][%d] getIsoInternalServerError  %+v", 500, o.Payload)
}

func (o *GetIsoInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

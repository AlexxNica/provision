package dhcp_reservations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new dhcp reservations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for dhcp reservations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DELETEDhcpReservation deletes d h c p reservation
*/
func (a *Client) DELETEDhcpReservation(params *DELETEDhcpReservationParams, authInfo runtime.ClientAuthInfoWriter) (*DELETEDhcpReservationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDELETEDhcpReservationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DELETE-dhcp-reservation",
		Method:             "DELETE",
		PathPattern:        "/reservations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DELETEDhcpReservationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DELETEDhcpReservationNoContent), nil

}

/*
GETDhcpReservation gets d h c p reservation
*/
func (a *Client) GETDhcpReservation(params *GETDhcpReservationParams, authInfo runtime.ClientAuthInfoWriter) (*GETDhcpReservationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETDhcpReservationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GET-dhcp-reservation",
		Method:             "GET",
		PathPattern:        "/reservations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETDhcpReservationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GETDhcpReservationOK), nil

}

/*
LISTDhcpReservations lists dhcp reservations
*/
func (a *Client) LISTDhcpReservations(params *LISTDhcpReservationsParams, authInfo runtime.ClientAuthInfoWriter) (*LISTDhcpReservationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLISTDhcpReservationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LIST-dhcp-reservations",
		Method:             "GET",
		PathPattern:        "/reservations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LISTDhcpReservationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LISTDhcpReservationsOK), nil

}

/*
POSTDhcpReservation creates d h c p reservation
*/
func (a *Client) POSTDhcpReservation(params *POSTDhcpReservationParams, authInfo runtime.ClientAuthInfoWriter) (*POSTDhcpReservationCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPOSTDhcpReservationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "POST-dhcp-reservation",
		Method:             "POST",
		PathPattern:        "/reservations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &POSTDhcpReservationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*POSTDhcpReservationCreated), nil

}

/*
PUTDhcpReservation updates d h c p reservation
*/
func (a *Client) PUTDhcpReservation(params *PUTDhcpReservationParams, authInfo runtime.ClientAuthInfoWriter) (*PUTDhcpReservationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPUTDhcpReservationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PUT-dhcp-reservation",
		Method:             "PUT",
		PathPattern:        "/reservations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PUTDhcpReservationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PUTDhcpReservationOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

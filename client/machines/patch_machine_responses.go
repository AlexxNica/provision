package machines

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/rackn/rocket-skates/models"
)

// PatchMachineReader is a Reader for the PatchMachine structure.
type PatchMachineReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchMachineReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPatchMachineOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewPatchMachineUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPatchMachineNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewPatchMachineConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 417:
		result := NewPatchMachineExpectationFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewPatchMachineInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchMachineOK creates a PatchMachineOK with default headers values
func NewPatchMachineOK() *PatchMachineOK {
	return &PatchMachineOK{}
}

/*PatchMachineOK handles this case with default header values.

PatchMachineOK patch machine o k
*/
type PatchMachineOK struct {
	Payload *models.MachineOutput
}

func (o *PatchMachineOK) Error() string {
	return fmt.Sprintf("[PATCH /machines/{uuid}][%d] patchMachineOK  %+v", 200, o.Payload)
}

func (o *PatchMachineOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MachineOutput)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchMachineUnauthorized creates a PatchMachineUnauthorized with default headers values
func NewPatchMachineUnauthorized() *PatchMachineUnauthorized {
	return &PatchMachineUnauthorized{}
}

/*PatchMachineUnauthorized handles this case with default header values.

PatchMachineUnauthorized patch machine unauthorized
*/
type PatchMachineUnauthorized struct {
	Payload *models.Error
}

func (o *PatchMachineUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /machines/{uuid}][%d] patchMachineUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchMachineUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchMachineNotFound creates a PatchMachineNotFound with default headers values
func NewPatchMachineNotFound() *PatchMachineNotFound {
	return &PatchMachineNotFound{}
}

/*PatchMachineNotFound handles this case with default header values.

PatchMachineNotFound patch machine not found
*/
type PatchMachineNotFound struct {
	Payload *models.Error
}

func (o *PatchMachineNotFound) Error() string {
	return fmt.Sprintf("[PATCH /machines/{uuid}][%d] patchMachineNotFound  %+v", 404, o.Payload)
}

func (o *PatchMachineNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchMachineConflict creates a PatchMachineConflict with default headers values
func NewPatchMachineConflict() *PatchMachineConflict {
	return &PatchMachineConflict{}
}

/*PatchMachineConflict handles this case with default header values.

PatchMachineConflict patch machine conflict
*/
type PatchMachineConflict struct {
	Payload *models.Error
}

func (o *PatchMachineConflict) Error() string {
	return fmt.Sprintf("[PATCH /machines/{uuid}][%d] patchMachineConflict  %+v", 409, o.Payload)
}

func (o *PatchMachineConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchMachineExpectationFailed creates a PatchMachineExpectationFailed with default headers values
func NewPatchMachineExpectationFailed() *PatchMachineExpectationFailed {
	return &PatchMachineExpectationFailed{}
}

/*PatchMachineExpectationFailed handles this case with default header values.

PatchMachineExpectationFailed patch machine expectation failed
*/
type PatchMachineExpectationFailed struct {
	Payload *models.Error
}

func (o *PatchMachineExpectationFailed) Error() string {
	return fmt.Sprintf("[PATCH /machines/{uuid}][%d] patchMachineExpectationFailed  %+v", 417, o.Payload)
}

func (o *PatchMachineExpectationFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchMachineInternalServerError creates a PatchMachineInternalServerError with default headers values
func NewPatchMachineInternalServerError() *PatchMachineInternalServerError {
	return &PatchMachineInternalServerError{}
}

/*PatchMachineInternalServerError handles this case with default header values.

PatchMachineInternalServerError patch machine internal server error
*/
type PatchMachineInternalServerError struct {
	Payload *models.Error
}

func (o *PatchMachineInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /machines/{uuid}][%d] patchMachineInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchMachineInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

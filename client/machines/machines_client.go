package machines

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new machines API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for machines API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteMachine deletes machine
*/
func (a *Client) DeleteMachine(params *DeleteMachineParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMachineNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMachineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete-machine",
		Method:             "DELETE",
		PathPattern:        "/machines/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMachineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMachineNoContent), nil

}

/*
GetMachine gets machine
*/
func (a *Client) GetMachine(params *GetMachineParams, authInfo runtime.ClientAuthInfoWriter) (*GetMachineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMachineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-machine",
		Method:             "GET",
		PathPattern:        "/machines/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMachineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMachineOK), nil

}

/*
ListMachines lists machines
*/
func (a *Client) ListMachines(params *ListMachinesParams, authInfo runtime.ClientAuthInfoWriter) (*ListMachinesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListMachinesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "list-machines",
		Method:             "GET",
		PathPattern:        "/machines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListMachinesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListMachinesOK), nil

}

/*
PatchMachine patches machine
*/
func (a *Client) PatchMachine(params *PatchMachineParams, authInfo runtime.ClientAuthInfoWriter) (*PatchMachineAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchMachineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patch-machine",
		Method:             "PATCH",
		PathPattern:        "/machines/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchMachineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchMachineAccepted), nil

}

/*
PostMachine creates machine
*/
func (a *Client) PostMachine(params *PostMachineParams, authInfo runtime.ClientAuthInfoWriter) (*PostMachineCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMachineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "post-machine",
		Method:             "POST",
		PathPattern:        "/machines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMachineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMachineCreated), nil

}

/*
PutMachine updates machine
*/
func (a *Client) PutMachine(params *PutMachineParams, authInfo runtime.ClientAuthInfoWriter) (*PutMachineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutMachineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "put-machine",
		Method:             "PUT",
		PathPattern:        "/machines/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutMachineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutMachineOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

package bootenvs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new bootenvs API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for bootenvs API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteBootenv deletes bootenv
*/
func (a *Client) DeleteBootenv(params *DeleteBootenvParams) (*DeleteBootenvNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBootenvParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete-bootenv",
		Method:             "DELETE",
		PathPattern:        "/bootenvs/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteBootenvReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteBootenvNoContent), nil

}

/*
GetBootenv gets bootenv
*/
func (a *Client) GetBootenv(params *GetBootenvParams) (*GetBootenvOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBootenvParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-bootenv",
		Method:             "GET",
		PathPattern:        "/bootenvs/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBootenvReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBootenvOK), nil

}

/*
ListBootenvs lists bootenvs
*/
func (a *Client) ListBootenvs(params *ListBootenvsParams) (*ListBootenvsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListBootenvsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "list-bootenvs",
		Method:             "GET",
		PathPattern:        "/bootenvs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListBootenvsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListBootenvsOK), nil

}

/*
PatchBootenv patches bootenv
*/
func (a *Client) PatchBootenv(params *PatchBootenvParams) (*PatchBootenvAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchBootenvParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patch-bootenv",
		Method:             "PATCH",
		PathPattern:        "/bootenvs/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchBootenvReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchBootenvAccepted), nil

}

/*
PostBootenv creates bootenv
*/
func (a *Client) PostBootenv(params *PostBootenvParams) (*PostBootenvCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostBootenvParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "post-bootenv",
		Method:             "POST",
		PathPattern:        "/bootenv",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostBootenvReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostBootenvCreated), nil

}

/*
PutBootenv updates bootenv
*/
func (a *Client) PutBootenv(params *PutBootenvParams) (*PutBootenvOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutBootenvParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "put-bootenv",
		Method:             "PUT",
		PathPattern:        "/bootenvs/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutBootenvReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutBootenvOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

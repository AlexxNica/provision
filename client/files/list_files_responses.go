package files

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/rackn/rocket-skates/models"
)

// ListFilesReader is a Reader for the ListFiles structure.
type ListFilesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListFilesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewListFilesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewListFilesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewListFilesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewListFilesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListFilesOK creates a ListFilesOK with default headers values
func NewListFilesOK() *ListFilesOK {
	return &ListFilesOK{}
}

/*ListFilesOK handles this case with default header values.

ListFilesOK list files o k
*/
type ListFilesOK struct {
	Payload []string
}

func (o *ListFilesOK) Error() string {
	return fmt.Sprintf("[GET /files][%d] listFilesOK  %+v", 200, o.Payload)
}

func (o *ListFilesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListFilesUnauthorized creates a ListFilesUnauthorized with default headers values
func NewListFilesUnauthorized() *ListFilesUnauthorized {
	return &ListFilesUnauthorized{}
}

/*ListFilesUnauthorized handles this case with default header values.

ListFilesUnauthorized list files unauthorized
*/
type ListFilesUnauthorized struct {
	Payload *models.Result
}

func (o *ListFilesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /files][%d] listFilesUnauthorized  %+v", 401, o.Payload)
}

func (o *ListFilesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Result)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListFilesNotFound creates a ListFilesNotFound with default headers values
func NewListFilesNotFound() *ListFilesNotFound {
	return &ListFilesNotFound{}
}

/*ListFilesNotFound handles this case with default header values.

ListFilesNotFound list files not found
*/
type ListFilesNotFound struct {
	Payload *models.Result
}

func (o *ListFilesNotFound) Error() string {
	return fmt.Sprintf("[GET /files][%d] listFilesNotFound  %+v", 404, o.Payload)
}

func (o *ListFilesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Result)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListFilesInternalServerError creates a ListFilesInternalServerError with default headers values
func NewListFilesInternalServerError() *ListFilesInternalServerError {
	return &ListFilesInternalServerError{}
}

/*ListFilesInternalServerError handles this case with default header values.

ListFilesInternalServerError list files internal server error
*/
type ListFilesInternalServerError struct {
	Payload *models.Result
}

func (o *ListFilesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /files][%d] listFilesInternalServerError  %+v", 500, o.Payload)
}

func (o *ListFilesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Result)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

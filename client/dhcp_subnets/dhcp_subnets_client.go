package dhcp_subnets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new dhcp subnets API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for dhcp subnets API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DELETEDhcpSubnet deletes d h c p subnet
*/
func (a *Client) DELETEDhcpSubnet(params *DELETEDhcpSubnetParams, authInfo runtime.ClientAuthInfoWriter) (*DELETEDhcpSubnetNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDELETEDhcpSubnetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DELETE-dhcp-subnet",
		Method:             "DELETE",
		PathPattern:        "/subnets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DELETEDhcpSubnetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DELETEDhcpSubnetNoContent), nil

}

/*
GETDhcpSubnet gets d h c p subnet
*/
func (a *Client) GETDhcpSubnet(params *GETDhcpSubnetParams, authInfo runtime.ClientAuthInfoWriter) (*GETDhcpSubnetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETDhcpSubnetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GET-dhcp-subnet",
		Method:             "GET",
		PathPattern:        "/subnets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETDhcpSubnetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GETDhcpSubnetOK), nil

}

/*
LISTDhcpSubnets lists dhcp subnets
*/
func (a *Client) LISTDhcpSubnets(params *LISTDhcpSubnetsParams, authInfo runtime.ClientAuthInfoWriter) (*LISTDhcpSubnetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLISTDhcpSubnetsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LIST-dhcp-subnets",
		Method:             "GET",
		PathPattern:        "/subnets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LISTDhcpSubnetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LISTDhcpSubnetsOK), nil

}

/*
POSTDhcpSubnet creates d h c p subnet
*/
func (a *Client) POSTDhcpSubnet(params *POSTDhcpSubnetParams, authInfo runtime.ClientAuthInfoWriter) (*POSTDhcpSubnetCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPOSTDhcpSubnetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "POST-dhcp-subnet",
		Method:             "POST",
		PathPattern:        "/subnets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &POSTDhcpSubnetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*POSTDhcpSubnetCreated), nil

}

/*
PUTDhcpSubnet updates d h c p subnet
*/
func (a *Client) PUTDhcpSubnet(params *PUTDhcpSubnetParams, authInfo runtime.ClientAuthInfoWriter) (*PUTDhcpSubnetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPUTDhcpSubnetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PUT-dhcp-subnet",
		Method:             "PUT",
		PathPattern:        "/subnets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PUTDhcpSubnetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PUTDhcpSubnetOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
